"""
–°–∏—Å—Ç–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è VK –ë–æ—Ç–∞
"""
import sqlite3
import json
import os
import logging
from datetime import datetime
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
    
    def __init__(self, db_path: str = "vk_bot.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        first_name TEXT,
                        last_name TEXT,
                        experience INTEGER DEFAULT 0,
                        rank_level INTEGER DEFAULT 1,
                        messages_count INTEGER DEFAULT 0,
                        voice_messages INTEGER DEFAULT 0,
                        mentions_count INTEGER DEFAULT 0,
                        reactions_count INTEGER DEFAULT 0,
                        warnings INTEGER DEFAULT 0,
                        banned INTEGER DEFAULT 0,
                        mute_until TEXT,
                        join_date TEXT,
                        last_activity TEXT
                    )
                ''')
                
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS chat_admins (
                        user_id INTEGER,
                        chat_id INTEGER,
                        is_owner INTEGER DEFAULT 0,
                        PRIMARY KEY (user_id, chat_id)
                    )
                ''')
                
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def get_user(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
                result = cursor.fetchone()
                return dict(result) if result else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def create_or_update_user(self, user_id: int, user_info: Dict) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            current_time = datetime.now().isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    INSERT OR REPLACE INTO users 
                    (user_id, first_name, last_name, join_date, last_activity)
                    VALUES (?, ?, ?, COALESCE((SELECT join_date FROM users WHERE user_id = ?), ?), ?)
                ''', (user_id, user_info.get('first_name', ''), user_info.get('last_name', ''), 
                      user_id, current_time, current_time))
                
            return self.get_user(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def is_admin(self, user_id: int, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT 1 FROM chat_admins WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
                return cursor.fetchone() is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
            return False
    
    def set_admin(self, user_id: int, chat_id: int, is_owner: bool = False):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("INSERT OR REPLACE INTO chat_admins VALUES (?, ?, ?)", 
                           (user_id, chat_id, 1 if is_owner else 0))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
    
    def get_rank_info(self, rank_level: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–µ"""
        ranks = {
            1: {"name": "ü•â –ù–æ–≤–∏—á–æ–∫", "emoji": "ü•â"},
            2: {"name": "üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π", "emoji": "üèÉ"},
            3: {"name": "üí¨ –ë–æ–ª—Ç—É–Ω", "emoji": "üí¨"},
            4: {"name": "üé≠ –®—É—Ç–Ω–∏–∫", "emoji": "üé≠"},
            5: {"name": "üéØ –ú–µ—Ç–∫–∏–π", "emoji": "üéØ"},
            6: {"name": "‚≠ê –ó–≤–µ–∑–¥–∞", "emoji": "‚≠ê"},
            7: {"name": "üî• –õ–µ–≥–µ–Ω–¥–∞", "emoji": "üî•"},
            8: {"name": "üëë –ö–æ—Ä–æ–ª—å", "emoji": "üëë"},
            9: {"name": "üíé –ê–ª–º–∞–∑", "emoji": "üíé"},
            10: {"name": "üöÄ –ö–æ—Å–º–æ—Å", "emoji": "üöÄ"}
        }
        return ranks.get(rank_level, {"name": "ü•â –ù–æ–≤–∏—á–æ–∫", "emoji": "ü•â"})
    
    def get_top_users(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM users ORDER BY experience DESC LIMIT ?", (limit,))
                return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞: {e}")
            return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager()