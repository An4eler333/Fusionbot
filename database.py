"""
–°–∏—Å—Ç–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è VK –ë–æ—Ç–∞
"""
import sqlite3
import json
import os
import logging
from datetime import datetime
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
    
    def __init__(self, db_path: str = "vk_bot.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ù–∞ Windows —Ñ–∞–π–ª—ã –ë–î –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ—Å—Ç–∞—Ö.
            # –í–∫–ª—é—á–∞–µ–º WAL –∏ —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–ª–∏—Å—å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã.
            with sqlite3.connect(self.db_path, timeout=0.5, isolation_level=None) as conn:
                conn.execute('PRAGMA journal_mode=WAL;')
                conn.execute('PRAGMA synchronous=OFF;')
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        first_name TEXT,
                        last_name TEXT,
                        experience INTEGER DEFAULT 0,
                        rank_level INTEGER DEFAULT 1,
                        messages_count INTEGER DEFAULT 0,
                        voice_messages INTEGER DEFAULT 0,
                        mentions_count INTEGER DEFAULT 0,
                        reactions_count INTEGER DEFAULT 0,
                        warnings INTEGER DEFAULT 0,
                        banned INTEGER DEFAULT 0,
                        mute_until TEXT,
                        join_date TEXT,
                        last_activity TEXT
                    )
                ''')
                
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS chat_admins (
                        user_id INTEGER,
                        chat_id INTEGER,
                        is_owner INTEGER DEFAULT 0,
                        PRIMARY KEY (user_id, chat_id)
                    )
                ''')
                
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def get_user(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
                result = cursor.fetchone()
                return dict(result) if result else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def create_or_update_user(self, user_id: int, user_info: Dict) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            current_time = datetime.now().isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    INSERT OR REPLACE INTO users 
                    (user_id, first_name, last_name, join_date, last_activity)
                    VALUES (?, ?, ?, COALESCE((SELECT join_date FROM users WHERE user_id = ?), ?), ?)
                ''', (user_id, user_info.get('first_name', ''), user_info.get('last_name', ''), 
                      user_id, current_time, current_time))
                
            return self.get_user(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def is_admin(self, user_id: int, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT 1 FROM chat_admins WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
                return cursor.fetchone() is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
            return False
    
    def set_admin(self, user_id: int, chat_id: int, is_owner: bool = False):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("INSERT OR REPLACE INTO chat_admins VALUES (?, ?, ?)", 
                           (user_id, chat_id, 1 if is_owner else 0))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
    
    def get_rank_info(self, rank_level: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–µ"""
        ranks = {
            1: {"name": "ü•â –ù–æ–≤–∏—á–æ–∫", "emoji": "ü•â", "exp_required": 0, "permissions": ["chat"]},
            2: {"name": "üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π", "emoji": "üèÉ", "exp_required": 100, "permissions": ["chat", "voice"]},
            3: {"name": "üí¨ –ë–æ–ª—Ç—É–Ω", "emoji": "üí¨", "exp_required": 300, "permissions": ["chat", "voice", "reactions"]},
            4: {"name": "üé≠ –®—É—Ç–Ω–∏–∫", "emoji": "üé≠", "exp_required": 600, "permissions": ["chat", "voice", "reactions", "jokes"]},
            5: {"name": "üéØ –ú–µ—Ç–∫–∏–π", "emoji": "üéØ", "exp_required": 1000, "permissions": ["chat", "voice", "reactions", "jokes", "games"]},
            6: {"name": "‚≠ê –ó–≤–µ–∑–¥–∞", "emoji": "‚≠ê", "exp_required": 1500, "permissions": ["chat", "voice", "reactions", "jokes", "games", "mentions"]},
            7: {"name": "üî• –õ–µ–≥–µ–Ω–¥–∞", "emoji": "üî•", "exp_required": 2500, "permissions": ["chat", "voice", "reactions", "jokes", "games", "mentions", "moderate"]},
            8: {"name": "üëë –ö–æ—Ä–æ–ª—å", "emoji": "üëë", "exp_required": 4000, "permissions": ["chat", "voice", "reactions", "jokes", "games", "mentions", "moderate", "warn"]},
            9: {"name": "üíé –ê–ª–º–∞–∑", "emoji": "üíé", "exp_required": 6000, "permissions": ["chat", "voice", "reactions", "jokes", "games", "mentions", "moderate", "warn", "mute"]},
            10: {"name": "üöÄ –ö–æ—Å–º–æ—Å", "emoji": "üöÄ", "exp_required": 10000, "permissions": ["chat", "voice", "reactions", "jokes", "games", "mentions", "moderate", "warn", "mute", "kick", "ban"]}
        }
        return ranks.get(rank_level, {"name": "ü•â –ù–æ–≤–∏—á–æ–∫", "emoji": "ü•â", "exp_required": 0, "permissions": ["chat"]})
    
    def add_experience(self, user_id: int, exp: int):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("UPDATE users SET experience = experience + ? WHERE user_id = ?", (exp, user_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
    
    def get_top_users(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM users ORDER BY experience DESC LIMIT ?", (limit,))
                return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞: {e}")
            return []
    
    def get_user_rank(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.get_user(user_id)
            if not user:
                return {"rank": "ü•â –ù–æ–≤–∏—á–æ–∫", "level": 1, "experience": 0}
            
            exp = user.get('experience', 0)
            level = 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ –æ–ø—ã—Ç—É
            for rank_level in range(10, 0, -1):
                rank_info = self.get_rank_info(rank_level)
                if exp >= rank_info['exp_required']:
                    level = rank_level
                    break
            
            rank_info = self.get_rank_info(level)
            return {
                "rank": rank_info['name'],
                "level": level,
                "experience": exp,
                "next_level_exp": self.get_rank_info(level + 1)['exp_required'] if level < 10 else 0,
                "permissions": rank_info['permissions']
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞: {e}")
            return {"rank": "ü•â –ù–æ–≤–∏—á–æ–∫", "level": 1, "experience": 0}
    
    def update_rank(self, user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞"""
        try:
            user = self.get_user(user_id)
            if not user:
                return
            
            exp = user.get('experience', 0)
            new_level = 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            for rank_level in range(10, 0, -1):
                rank_info = self.get_rank_info(rank_level)
                if exp >= rank_info['exp_required']:
                    new_level = rank_level
                    break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if new_level != user.get('rank_level', 1):
                with sqlite3.connect(self.db_path) as conn:
                    conn.execute("UPDATE users SET rank_level = ? WHERE user_id = ?", (new_level, user_id))
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π —Ä–∞–Ω–≥: {self.get_rank_info(new_level)['name']}")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞: {e}")
            return False
    
    def mute_user(self, user_id: int, duration_minutes: int):
        """–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            mute_until = datetime.now().timestamp() + (duration_minutes * 60)
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("UPDATE users SET mute_until = ? WHERE user_id = ?", (str(mute_until), user_id))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º—É—Ç–∞: {e}")
            return False
    
    def unmute_user(self, user_id: int):
        """–†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("UPDATE users SET mute_until = NULL WHERE user_id = ?", (user_id,))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—É—á–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º—É—Ç–∞: {e}")
            return False
    
    def is_muted(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        try:
            user = self.get_user(user_id)
            if not user or not user.get('mute_until'):
                return False
            
            mute_until = float(user['mute_until'])
            if datetime.now().timestamp() > mute_until:
                self.unmute_user(user_id)
                return False
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É—Ç–∞: {e}")
            return False
    
    def ban_user(self, user_id: int):
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("UPDATE users SET banned = 1 WHERE user_id = ?", (user_id,))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")
            return False
    
    def unban_user(self, user_id: int):
        """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("UPDATE users SET banned = 0 WHERE user_id = ?", (user_id,))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")
            return False
    
    def is_banned(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        try:
            user = self.get_user(user_id)
            return user and user.get('banned', 0) == 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞: {e}")
            return False
    
    def add_warning(self, user_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("UPDATE users SET warnings = warnings + 1 WHERE user_id = ?", (user_id,))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
            return False
    
    def get_warnings(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        try:
            user = self.get_user(user_id)
            return user.get('warnings', 0) if user else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager()