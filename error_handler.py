"""
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è VK –ë–æ—Ç–∞
"""
import logging
import traceback
import asyncio
from datetime import datetime
from typing import Any, Dict, List, Optional, Union, Callable
from dataclasses import dataclass
from enum import Enum
import re

logger = logging.getLogger(__name__)

class ErrorSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class ErrorCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫"""
    VK_API = "vk_api"
    NETWORK = "network"
    DATABASE = "database"
    AI_SYSTEM = "ai_system"
    VALIDATION = "validation"
    UNKNOWN = "unknown"

@dataclass
class ErrorInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    error: Exception
    category: ErrorCategory
    severity: ErrorSeverity
    context: Dict[str, Any]
    timestamp: datetime
    traceback: str
    user_id: Optional[int] = None
    peer_id: Optional[int] = None

class ValidationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class VKAPIError(Exception):
    """–û—à–∏–±–∫–∞ VK API"""
    pass

class DatabaseError(Exception):
    """–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    pass

class AISystemError(Exception):
    """–û—à–∏–±–∫–∞ –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
    pass

class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.error_history: List[ErrorInfo] = []
        self.error_counts: Dict[str, int] = {}
        self.retry_strategies: Dict[ErrorCategory, Callable] = {}
        self._setup_retry_strategies()
    
    def _setup_retry_strategies(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        self.retry_strategies = {
            ErrorCategory.NETWORK: self._retry_network_operation,
            ErrorCategory.VK_API: self._retry_vk_api_operation,
            ErrorCategory.DATABASE: self._retry_database_operation,
            ErrorCategory.AI_SYSTEM: self._retry_ai_operation,
        }
    
    def handle_error(
        self,
        error: Exception,
        category: ErrorCategory = ErrorCategory.UNKNOWN,
        severity: ErrorSeverity = ErrorSeverity.MEDIUM,
        context: Optional[Dict[str, Any]] = None,
        user_id: Optional[int] = None,
        peer_id: Optional[int] = None,
        retry: bool = True
    ) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, False –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
        """
        if context is None:
            context = {}
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        error_info = ErrorInfo(
            error=error,
            category=category,
            severity=severity,
            context=context,
            timestamp=datetime.now(),
            traceback=traceback.format_exc(),
            user_id=user_id,
            peer_id=peer_id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.error_history.append(error_info)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        error_key = f"{category.value}_{type(error).__name__}"
        self.error_counts[error_key] = self.error_counts.get(error_key, 0) + 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        self._log_error(error_info)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        if severity == ErrorSeverity.CRITICAL:
            return self._handle_critical_error(error_info)
        elif severity == ErrorSeverity.HIGH:
            return self._handle_high_error(error_info, retry)
        elif severity == ErrorSeverity.MEDIUM:
            return self._handle_medium_error(error_info, retry)
        else:
            return self._handle_low_error(error_info)
    
    def _log_error(self, error_info: ErrorInfo):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        log_message = (
            f"‚ùå {error_info.category.value.upper()} ERROR "
            f"[{error_info.severity.value.upper()}] "
            f"{type(error_info.error).__name__}: {error_info.error}"
        )
        
        if error_info.user_id:
            log_message += f" (User: {error_info.user_id})"
        if error_info.peer_id:
            log_message += f" (Peer: {error_info.peer_id})"
        
        if error_info.severity == ErrorSeverity.CRITICAL:
            logger.critical(log_message)
            logger.critical(f"Traceback: {error_info.traceback}")
        elif error_info.severity == ErrorSeverity.HIGH:
            logger.error(log_message)
        elif error_info.severity == ErrorSeverity.MEDIUM:
            logger.warning(log_message)
        else:
            logger.info(log_message)
    
    def _handle_critical_error(self, error_info: ErrorInfo) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        self._notify_admin(error_info)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return False
    
    def _handle_high_error(self, error_info: ErrorInfo, retry: bool) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        if retry and error_info.category in self.retry_strategies:
            return self.retry_strategies[error_info.category](error_info)
        
        # Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞
        return self._fallback_handling(error_info)
    
    def _handle_medium_error(self, error_info: ErrorInfo, retry: bool) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫"""
        if retry and error_info.category in self.retry_strategies:
            return self.retry_strategies[error_info.category](error_info)
        
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    
    def _handle_low_error(self, error_info: ErrorInfo) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        return True  # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    def _retry_network_operation(self, error_info: ErrorInfo) -> bool:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        return True
    
    def _retry_vk_api_operation(self, error_info: ErrorInfo) -> bool:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ VK API –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ VK API –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        return True
    
    def _retry_database_operation(self, error_info: ErrorInfo) -> bool:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        return True
    
    def _retry_ai_operation(self, error_info: ErrorInfo) -> bool:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ò–ò –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ò–ò –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        return True
    
    def _fallback_handling(self, error_info: ErrorInfo) -> bool:
        """Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        if error_info.category == ErrorCategory.VK_API:
            logger.warning("‚ö†Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ VK API")
            return True
        elif error_info.category == ErrorCategory.AI_SYSTEM:
            logger.warning("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò")
            return True
        elif error_info.category == ErrorCategory.DATABASE:
            logger.warning("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return True
        
        return True
    
    def _notify_admin(self, error_info: ErrorInfo):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.critical(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {error_info.error}")
    
    def get_error_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        return {
            'total_errors': len(self.error_history),
            'error_counts': self.error_counts,
            'recent_errors': [
                {
                    'timestamp': error.timestamp.isoformat(),
                    'category': error.category.value,
                    'severity': error.severity.value,
                    'error': str(error.error)
                }
                for error in self.error_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
            ]
        }

class DataValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_vk_token(token: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è VK —Ç–æ–∫–µ–Ω–∞"""
        if not token:
            raise ValidationError("–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if not isinstance(token, str):
            raise ValidationError("–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        if not token.startswith('vk1.a.'):
            raise ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VK —Ç–æ–∫–µ–Ω–∞")
        
        if len(token) < 50:
            raise ValidationError("–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        
        return True
    
    @staticmethod
    def validate_peer_id(peer_id: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è peer_id"""
        if not isinstance(peer_id, int):
            raise ValidationError("peer_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        if peer_id <= 0:
            raise ValidationError("peer_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        return True
    
    @staticmethod
    def validate_message_text(text: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not isinstance(text, str):
            raise ValidationError("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        if len(text) > 4096:
            raise ValidationError("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        dangerous_patterns = [
            r'<script.*?>',
            r'javascript:',
            r'data:text/html',
        ]
        
        for pattern in dangerous_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                raise ValidationError("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        
        return True
    
    @staticmethod
    def validate_user_id(user_id: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è user_id"""
        if not isinstance(user_id, int):
            raise ValidationError("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        if user_id <= 0:
            raise ValidationError("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        return True
    
    @staticmethod
    def validate_group_id(group_id: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è group_id"""
        if not isinstance(group_id, int):
            raise ValidationError("group_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        if group_id <= 0:
            raise ValidationError("group_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        return True

class SafeExecutor:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    def __init__(self, error_handler: ErrorHandler):
        self.error_handler = error_handler
    
    async def safe_execute(
        self,
        func: Callable,
        *args,
        category: ErrorCategory = ErrorCategory.UNKNOWN,
        severity: ErrorSeverity = ErrorSeverity.MEDIUM,
        context: Optional[Dict[str, Any]] = None,
        **kwargs
    ) -> Any:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            if asyncio.iscoroutinefunction(func):
                return await func(*args, **kwargs)
            else:
                return func(*args, **kwargs)
        except Exception as e:
            self.error_handler.handle_error(
                e, category=category, severity=severity, context=context
            )
            return None
    
    def safe_execute_sync(
        self,
        func: Callable,
        *args,
        category: ErrorCategory = ErrorCategory.UNKNOWN,
        severity: ErrorSeverity = ErrorSeverity.MEDIUM,
        context: Optional[Dict[str, Any]] = None,
        **kwargs
    ) -> Any:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            return func(*args, **kwargs)
        except Exception as e:
            self.error_handler.handle_error(
                e, category=category, severity=severity, context=context
            )
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
error_handler = ErrorHandler()
data_validator = DataValidator()
safe_executor = SafeExecutor(error_handler)

