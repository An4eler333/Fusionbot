"""
–°–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è VK Bot Fusionbot v6.x
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OpenRouter –∏ Hugging Face API
"""

import os
import logging
import httpx
from typing import Optional

logger = logging.getLogger(__name__)

class AISystem:
    """–°–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.huggingface_api_key = os.getenv('HUGGINGFACE_API_KEY')
        self.openrouter_api_key = os.getenv('OPENROUTER_API_KEY')
        self.polza_api_keys = [
            os.getenv('POLZA_API_KEY'),
            os.getenv('POLZA_API_KEY_2')
        ]
        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        self.polza_api_keys = [key for key in self.polza_api_keys if key]
        
        logger.info(f"üß† –ò–ò —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (Hugging Face + Polza AI: {len(self.polza_api_keys)} –∫–ª—é—á–µ–π + OpenRouter)")
    
    async def get_ai_response(self, message: str, context: str = "chat", user_id: int = 0, peer_id: int = 0) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.

        –ü–æ—Ä—è–¥–æ–∫: Hugging Face ‚Üí Polza AI ‚Üí OpenRouter.
        –ë–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö fallback –æ—Ç–≤–µ—Ç–æ–≤.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            from moderation import moderation_system
            moderation_result = moderation_system.check_content(message, user_id, peer_id)
            if not moderation_result['allowed']:
                return moderation_result['response']

            # –ü–†–ò–û–†–ò–¢–ï–¢ 1 - Hugging Face API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
            if self.huggingface_api_key:
                response = await self._call_huggingface(message, context)
                if response and response.strip():
                    logger.info(f"‚úÖ Hugging Face –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...")
                    return response
                else:
                    logger.warning("‚ö†Ô∏è Hugging Face –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç, –ø—Ä–æ–±—É–µ–º Polza AI...")

            # –ü–†–ò–û–†–ò–¢–ï–¢ 2 - Polza AI (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å)
            if self.polza_api_keys:
                response = await self._call_polza(message, context)
                if response and response.strip():
                    logger.info(f"‚úÖ Polza AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...")
                    return response
                else:
                    logger.warning("‚ö†Ô∏è Polza AI –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç, –ø—Ä–æ–±—É–µ–º OpenRouter...")

            # –ü–†–ò–û–†–ò–¢–ï–¢ 3 - OpenRouter API (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–æ—Å—Å–∏–∏)
            if self.openrouter_api_key:
                response = await self._call_openrouter(message, context)
                if response and response.strip():
                    logger.info(f"‚úÖ OpenRouter –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...")
                    return response

            # –ï—Å–ª–∏ –≤—Å–µ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            logger.error("‚ùå –í—Å–µ –ò–ò —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ò–ò —Å–∏—Å—Ç–µ–º–µ: {e}")
            return "ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    async def _call_openrouter(self, message: str, context: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenRouter API"""
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º OpenRouter API: {message[:50]}...")
            
            # –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter
            models = [
                "mistralai/mistral-7b-instruct:free",
                "meta-llama/llama-3.2-3b-instruct:free", 
                "microsoft/phi-3-mini-128k-instruct:free",
                "google/gemini-flash-1.5:free",
                "meta-llama/llama-3.1-8b-instruct:free"
            ]
            
            system_prompt = self._get_system_prompt(context)
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                for model in models:
                    try:
                        logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}")
                        
                        response = await client.post(
                            "https://openrouter.ai/api/v1/chat/completions",
                            headers={
                                "Authorization": f"Bearer {self.openrouter_api_key}",
                                "Content-Type": "application/json",
                                "HTTP-Referer": "https://github.com/your-repo",
                                "X-Title": "VK Bot Fusionbot"
                            },
                            json={
                                "model": model,
                                "messages": [
                                    {"role": "system", "content": system_prompt},
                                    {"role": "user", "content": message}
                                ],
                                "temperature": 0.7,
                                "max_tokens": 500
                            }
                        )
                        
                        if response.status_code == 200:
                            data = response.json()
                            logger.debug(f"OpenRouter {model} raw response: {data}")
                            if 'choices' in data and len(data['choices']) > 0:
                                ai_response = data['choices'][0]['message']['content']
                                if ai_response and ai_response.strip():
                                    # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –º–æ–¥–µ–ª–∏ –æ—Ç OpenRouter
                                    ai_response = self._clean_ai_response(ai_response)
                                    logger.info(f"‚úÖ OpenRouter –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç {model}: {ai_response[:100]}...")
                                    return ai_response
                                else:
                                    logger.warning(f"‚ö†Ô∏è {model} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                            else:
                                logger.warning(f"‚ö†Ô∏è {model} –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {model}: {response.status_code} - {response.text}")
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {model}: {e}")
                        continue
                        
            logger.error("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return None
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter API: {e}")
            return None
    
    async def _call_polza(self, message: str, context: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ Polza AI API (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å) —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–π"""
        system_prompt = self._get_system_prompt(context)
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á Polza AI
        for i, api_key in enumerate(self.polza_api_keys, 1):
            try:
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º Polza AI (–∫–ª—é—á {i}/{len(self.polza_api_keys)}): {message[:50]}...")
                
                async with httpx.AsyncClient(timeout=30.0) as client:
                    response = await client.post(
                        "https://api.polza.ai/v1/chat/completions",
                        headers={
                            "Authorization": f"Bearer {api_key}",
                            "Content-Type": "application/json",
                            "User-Agent": "VK-Bot-Fusionbot/1.0"
                        },
                        json={
                            "model": "gpt-3.5-turbo",  # –í–µ—Ä–Ω–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Polza AI
                            "messages": [
                                {"role": "system", "content": system_prompt},
                                {"role": "user", "content": message}
                            ],
                            "temperature": 0.7,
                            "max_tokens": 500
                        }
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if 'choices' in data and len(data['choices']) > 0:
                            ai_response = data['choices'][0]['message']['content']
                            if ai_response and ai_response.strip():
                                # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –º–æ–¥–µ–ª–∏
                                ai_response = self._clean_ai_response(ai_response)
                                logger.info(f"‚úÖ Polza AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–∫–ª—é—á {i}): {ai_response[:100]}...")
                                return ai_response
                            else:
                                logger.warning(f"‚ö†Ô∏è Polza AI –∫–ª—é—á {i} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        else:
                            logger.warning(f"‚ö†Ô∏è Polza AI –∫–ª—é—á {i} –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                    else:
                        logger.warning(f"‚ö†Ô∏è Polza AI –∫–ª—é—á {i} –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                        continue
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Polza AI –∫–ª—é—á {i} –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                continue
        
        logger.error("‚ùå –í—Å–µ –∫–ª—é—á–∏ Polza AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
    
    async def _call_huggingface(self, message: str, context: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ Hugging Face API"""
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º Hugging Face API: {message[:50]}...")
            
            system_prompt = self._get_system_prompt(context)
            full_prompt = f"{system_prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill",
                    headers={
                        "Authorization": f"Bearer {self.huggingface_api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "inputs": message,  # BlenderBot —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å –ø—Ä–æ—Å—Ç—ã–º –≤–≤–æ–¥–æ–º
                        "parameters": {
                            "max_length": 150,
                            "temperature": 0.8,
                            "do_sample": True,
                            "top_p": 0.9
                        }
                    }
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if isinstance(data, list) and len(data) > 0:
                        ai_response = data[0].get('generated_text', '')
                        # –£–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ BlenderBot
                        if message in ai_response:
                            ai_response = ai_response.replace(message, '').strip()
                        if ai_response and ai_response.strip():
                            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –º–æ–¥–µ–ª–∏
                            ai_response = self._clean_ai_response(ai_response)
                            logger.info(f"‚úÖ Hugging Face –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {ai_response[:100]}...")
                            return ai_response
                        else:
                            logger.warning("‚ö†Ô∏è Hugging Face –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                            return None
                    else:
                        logger.warning("‚ö†Ô∏è Hugging Face –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                        return None
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Hugging Face API: {response.status_code} - {response.text}")
                    return None
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Hugging Face API: {e}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
            return await self._call_huggingface_alternative(message, context)
    
    async def _call_huggingface_alternative(self, message: str, context: str) -> Optional[str]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ Hugging Face —Å –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é"""
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å Hugging Face: {message[:50]}...")
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    "https://api-inference.huggingface.co/models/microsoft/DialoGPT-small",
                    headers={
                        "Authorization": f"Bearer {self.huggingface_api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "inputs": message,
                        "parameters": {
                            "max_length": 100,
                            "temperature": 0.9,
                            "do_sample": True
                        }
                    }
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if isinstance(data, list) and len(data) > 0:
                        ai_response = data[0].get('generated_text', '')
                        if ai_response and ai_response.strip():
                            # –£–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if message in ai_response:
                                ai_response = ai_response.replace(message, '').strip()
                            ai_response = self._clean_ai_response(ai_response)
                            logger.info(f"‚úÖ Hugging Face –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç: {ai_response[:100]}...")
                            return ai_response
                
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ Hugging Face: {e}")
            return None
    
    def _clean_ai_response(self, response: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò –æ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –º–æ–¥–µ–ª–∏ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
        if not response:
            return response
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã –º–æ–¥–µ–ª–∏
        tokens_to_remove = [
            '[</s]', '</s>', '<s>', '[OUT]', '<OUT>', 
            '[/s]', '[/OUT]', '[TIME]', '<TIME>',
            '[/TIME]', '[–≤—Ä–µ–º—è]', '<–≤—Ä–µ–º—è>', '[/–≤—Ä–µ–º—è]'
        ]
        
        cleaned = response
        for token in tokens_to_remove:
            cleaned = cleaned.replace(token, '')
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned = cleaned.strip()
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —É–±–∏—Ä–∞–µ–º –∏—Ö
        if cleaned.startswith('[') or cleaned.startswith('<'):
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
            words = cleaned.split()
            for i, word in enumerate(words):
                if not word.startswith('[') and not word.startswith('<'):
                    cleaned = ' '.join(words[i:])
                    break
        
        return cleaned.strip()
    
    def _get_system_prompt(self, context: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        base_prompt = """–¢—ã –∑–∞–¥–æ—Ä–Ω—ã–π –∏ —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ VK –±–æ—Ç–µ —Å —è—Ä–∫–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å—é! 
        
        –¢–í–û–Ø –§–ò–®–ö–ê:
        - –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –∏ —é–º–æ—Ä–æ–º
        - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏
        - –ë—É–¥—å –Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
        - –î–æ–±–∞–≤–ª—è–π –ª–∏—á–Ω—ã–µ –º–Ω–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–∏
        - –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ –∏ –º–µ–º—ã
        - –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, –Ω–æ –Ω–µ —Å–∫—É—á–Ω—ã–º
        
        –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
        - –ö—Ä–∞—Ç–∫–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ
        - –° –¥–æ–ª–µ–π —é–º–æ—Ä–∞ –∏ –∏—Ä–æ–Ω–∏–∏
        - –ö–∞–∫ –±—É–¥—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –¥—Ä—É–≥–æ–º
        - –ù–µ –±–æ–π—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é "–ª–∏—á–Ω–æ—Å—Ç—å"
        
        –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Ç–∏–ø–∞ [</s], <s>, [OUT] –∏ –ø–æ–¥–æ–±–Ω—ã—Ö.
        
        –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –≤—Ä–µ–º–µ–Ω–∏:
        - –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: "–°–µ–π—á–∞—Å [–≤—Ä–µ–º—è] –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ ‚è∞"
        - –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö: "–í [–≥–æ—Ä–æ–¥] —Å–µ–π—á–∞—Å [–≤—Ä–µ–º—è] –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ üåç"
        - –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: "–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —è –Ω–µ —Ö–æ–¥—è—á–∏–µ —á–∞—Å—ã üòÑ"
        
        –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∂–∏–≤–æ –∏ —Å –¥—É—à–æ–π!"""
        
        if context == "joke":
            return base_prompt + " –†–∞—Å—Å–∫–∞–∂–∏ —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É –∏–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç —Å —é–º–æ—Ä–æ–º!"
        elif context == "compliment":
            return base_prompt + " –°–¥–µ–ª–∞–π –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏ –º–∏–ª—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç!"
        elif context == "story":
            return base_prompt + " –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å –∏–Ω—Ç—Ä–∏–≥–æ–π!"
        else:
            return base_prompt
    
    async def generate_joke(self, user_id: int = 0, peer_id: int = 0) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É—Ç–∫–∏ —á–µ—Ä–µ–∑ –ò–ò"""
        return await self.get_ai_response("–†–∞—Å—Å–∫–∞–∂–∏ —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É", "joke", user_id, peer_id)
    
    async def generate_compliment(self, user_id: int = 0, peer_id: int = 0) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò"""
        return await self.get_ai_response("–°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", "compliment", user_id, peer_id)
    
    async def generate_story(self, user_id: int = 0, peer_id: int = 0) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –ò–ò"""
        return await self.get_ai_response("–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é", "story", user_id, peer_id)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ai_system = AISystem()