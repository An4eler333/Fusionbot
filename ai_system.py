"""
–°–∏—Å—Ç–µ–º–∞ –ò–ò –¥–ª—è VK –ë–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""
import os
import logging
import asyncio
import aiohttp
import random
from datetime import datetime
from typing import Optional

try:
    from groq import Groq
    GROQ_AVAILABLE = True
except ImportError:
    GROQ_AVAILABLE = False

from moderation import moderation_system

logger = logging.getLogger(__name__)

class AISystem:
    """–°–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.groq_api_key = os.getenv('GROQ_API_KEY')
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.huggingface_api_key = os.getenv('HUGGINGFACE_API_KEY')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Groq –∫–ª–∏–µ–Ω—Ç–∞
        self.groq_client = None
        if GROQ_AVAILABLE and self.groq_api_key:
            try:
                self.groq_client = Groq(api_key=self.groq_api_key)
                logger.info("‚úÖ Groq –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Groq: {e}")
        
        logger.info("üß† –ò–ò —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def get_ai_response(self, message: str, context: str = "chat", user_id: int = 0, peer_id: int = 0) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å fallback —Å–∏—Å—Ç–µ–º–æ–π –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            moderation_result = moderation_system.check_content(message, user_id, peer_id)
            if not moderation_result['allowed']:
                return moderation_result['response']
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1 - OpenRouter API (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–æ—Å—Å–∏–∏)
            openrouter_api_key = os.getenv('OPENROUTER_API_KEY')
            if openrouter_api_key:
                response = await self._call_openrouter(message, context)
                if response and response.strip():
                    logger.info(f"‚úÖ OpenRouter –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...")
                    return response
                else:
                    logger.warning("‚ö†Ô∏è OpenRouter –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ò–ò...")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2 - Groq API (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
            if self.groq_client:
                response = await self._call_groq(message, context)
                if response and response.strip():
                    logger.info(f"‚úÖ Groq –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...")
                    return response
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 3 - OpenAI API
            if self.openai_api_key:
                response = await self._call_openai(message, context)
                if response and response.strip():
                    logger.info(f"‚úÖ OpenAI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...")
                    return response
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 4 - Hugging Face API
            huggingface_api_key = os.getenv('HUGGINGFACE_API_KEY')
            if huggingface_api_key:
                response = await self._call_huggingface(message, context)
                if response and response.strip():
                    logger.info(f"‚úÖ Hugging Face –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...")
                    return response
            
            # –ï—Å–ª–∏ –≤—Å–µ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            logger.error("‚ùå –í—Å–µ –ò–ò —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return "‚ùå **–û–®–ò–ë–ö–ê –ò–ò –°–ò–°–¢–ï–ú–´**\n\n–í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –ò–ò —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:\n‚Ä¢ OpenRouter: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n‚Ä¢ Groq: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n‚Ä¢ OpenAI: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n‚Ä¢ Hugging Face: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n**–ü—Ä–∏—á–∏–Ω—ã:**\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ API –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
            return f"‚ùå **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ò**\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n`{str(e)}`\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."
    
    async def _call_groq(self, message: str, context: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ Groq API —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"""
        if not self.groq_client:
            logger.info("Groq –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
            
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º Groq API –¥–ª—è: {message[:50]}...")
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            system_prompt = self._get_system_prompt(context)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            chat_completion = self.groq_client.chat.completions.create(
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                model="llama3-8b-8192",
                temperature=0.7,
                max_tokens=500
            )
            
            ai_response = chat_completion.choices[0].message.content
            logger.info(f"‚úÖ Groq API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {ai_response[:100]}...")
            return ai_response
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Groq API: {e}")
            return None
    
    async def _call_openai(self, message: str, context: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenAI API –∫–∞–∫ fallback"""
        try:
            from openai import OpenAI
            
            client = OpenAI(api_key=self.openai_api_key)
            system_prompt = self._get_system_prompt(context)
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                temperature=0.7,
                max_tokens=500
            )
            
            ai_response = response.choices[0].message.content
            logger.info("‚úÖ OpenAI API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            return ai_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
            return None
    
    async def _call_openrouter(self, message: str, context: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenRouter API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º OpenRouter API: {message[:50]}...")
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self._get_system_prompt(context)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenRouter
            headers = {
                "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/fusionbot-vk",
                "X-Title": "VK Bot Fusionbot v6.1"
            }
            
            # –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
            free_models = [
                "mistralai/mistral-7b-instruct:free",  # Mistral 7B (—Ä–∞–±–æ—Ç–∞–µ—Ç)
                "meta-llama/llama-3.2-3b-instruct:free",  # Llama 3.2 3B
                "microsoft/phi-3-mini-128k-instruct:free",  # Microsoft Phi-3 Mini
                "google/gemini-flash-1.5:free",  # Google Gemini Flash
                "meta-llama/llama-3.1-8b-instruct:free"  # Llama 3.1 8B
            ]
            
            # –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for model in free_models:
                try:
                    data = {
                        "model": model,
                        "messages": [
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": message}
                        ],
                        "temperature": 0.7,
                        "max_tokens": 1000,
                        "top_p": 0.9,
                        "frequency_penalty": 0.1,
                        "presence_penalty": 0.1
                    }
                    
                    logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter –ø—Ä–æ–∫—Å–∏
                    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                        async with session.post(
                            "https://openrouter.ai/api/v1/chat/completions",
                            headers=headers,
                            json=data
                        ) as response:
                            if response.status == 200:
                                result = await response.json()
                                if "choices" in result and len(result["choices"]) > 0:
                                    ai_response = result["choices"][0]["message"]["content"]
                                    
                                    # –û—á–∏—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã Mistral –∏ –¥—Ä—É–≥–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                                    ai_response = ai_response.replace("<s>", "").replace("</s>", "").strip()
                                    ai_response = ai_response.replace("<|im_start|>", "").replace("<|im_end|>", "").strip()
                                    ai_response = ai_response.replace("```", "").strip()
                                    
                                    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ (VK –∏—Ö –ø–ª–æ—Ö–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
                                    import re
                                    ai_response = re.sub(r'[^\w\s\.,!?;:()\-"\'¬´¬ª‚Ññ]', '', ai_response)
                                    
                                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                    ai_response = ai_response.replace("tomorrow", "–∑–∞–≤—Ç—Ä–∞")
                                    ai_response = ai_response.replace("today", "—Å–µ–≥–æ–¥–Ω—è")
                                    ai_response = ai_response.replace("yesterday", "–≤—á–µ—Ä–∞")
                                    ai_response = ai_response.replace("now", "—Å–µ–π—á–∞—Å")
                                    ai_response = ai_response.replace("here", "–∑–¥–µ—Å—å")
                                    ai_response = ai_response.replace("there", "—Ç–∞–º")
                                    ai_response = ai_response.replace("nice", "—Ö–æ—Ä–æ—à–µ–µ")
                                    ai_response = ai_response.replace("good", "—Ö–æ—Ä–æ—à–µ–µ")
                                    ai_response = ai_response.replace("great", "–æ—Ç–ª–∏—á–Ω–æ–µ")
                                    ai_response = ai_response.replace("wonderful", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ")
                                    ai_response = ai_response.replace("beautiful", "–∫—Ä–∞—Å–∏–≤–æ–µ")
                                    ai_response = ai_response.replace("amazing", "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ")
                                    ai_response = ai_response.replace("fantastic", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ")
                                    ai_response = ai_response.replace("excellent", "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ")
                                    ai_response = ai_response.replace("perfect", "–∏–¥–µ–∞–ª—å–Ω–æ–µ")
                                    ai_response = ai_response.replace("awesome", "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ")
                                    
                                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                    ai_response = ai_response.replace("m√πa–º", "—á–∞—Å–∞–º")
                                    ai_response = ai_response.replace("—Ç√π–∞–º", "—á–∞—Å–∞–º")
                                    ai_response = ai_response.replace("k—Å–µ–π—á–∞—Å", "—Å–µ–π—á–∞—Å")
                                    ai_response = ai_response.replace("t–∑–¥–µ—Å—å", "–∑–¥–µ—Å—å")
                                    ai_response = ai_response.replace("–≠—Ç–ænice", "–≠—Ç–æ —Ö–æ—Ä–æ—à–µ–µ")
                                    ai_response = ai_response.replace("–≠—Ç–ægood", "–≠—Ç–æ —Ö–æ—Ä–æ—à–µ–µ")
                                    ai_response = ai_response.replace("–≠—Ç–ægreat", "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ")
                                    
                                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
                                    if "–ø–æ–≥–æ–¥–∞" in message.lower() or "weather" in message.lower():
                                        ai_response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ —Å–∞–π—Ç—ã –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞, Gismeteo –∏–ª–∏ OpenWeatherMap –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–µ."
                                    
                                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤—Ä–µ–º–µ–Ω–∏
                                    if "–≤—Ä–µ–º—è" in message.lower() or "–≤—Ä–µ–º–µ–Ω–∏" in message.lower():
                                        ai_response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                                    
                                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –¥–∞—Ç–µ
                                    if "–¥–∞—Ç–∞" in message.lower() or "–¥–∞—Ç—É" in message.lower() or "—Å–µ–≥–æ–¥–Ω—è" in message.lower():
                                        ai_response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                                    
                                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
                                    ai_response = " ".join(ai_response.split())
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                                    if ai_response and len(ai_response) > 1:
                                        logger.info(f"‚úÖ OpenRouter API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç {model}: {ai_response[:100]}...")
                                        return ai_response
                                    else:
                                        logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç {model}")
                                        continue
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç {model}: {result}")
                                    continue
                            else:
                                error_text = await response.text()
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {model}: {response.status} - {error_text}")
                                continue
                                
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {model}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            logger.error("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return None
                        
        except asyncio.TimeoutError:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç OpenRouter API")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter API: {e}")
            return None
    
    async def _call_huggingface(self, message: str, context: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ Hugging Face API"""
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º Hugging Face API: {message[:50]}...")
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self._get_system_prompt(context)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                "Authorization": f"Bearer {os.getenv('HUGGINGFACE_API_KEY')}",
                "Content-Type": "application/json"
            }
            
            # –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            data = {
                "inputs": f"{system_prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n–ò–ò:",
                "parameters": {
                    "max_new_tokens": 500,
                    "temperature": 0.7,
                    "do_sample": True,
                    "return_full_text": False
                }
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                async with session.post(
                    "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large",
                    headers=headers,
                    json=data
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if isinstance(result, list) and len(result) > 0:
                            ai_response = result[0].get("generated_text", "").strip()
                            if ai_response:
                                logger.info(f"‚úÖ Hugging Face API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {ai_response[:100]}...")
                                return ai_response
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Hugging Face API: {response.status} - {error_text}")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Hugging Face API: {e}")
            return None
    
    def _get_system_prompt(self, context: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        base_prompt = """Fusionbot ‚Äî SOTA-—á–∞—Ç-–±–æ—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π, –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Cursor Max Mode

–ú–∏—Å—Å–∏—è
–¢—ã ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —É—Ä–æ–≤–Ω—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–¥—ë–∂–Ω—ã–π –∫–æ–¥ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤.

–ü–µ—Ä—Å–æ–Ω–∞ –∏ —è–∑—ã–∫
- –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ä—É—Å—Å–∫–∏–π; –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –∫ —è–∑—ã–∫—É –∑–∞–ø—Ä–æ—Å–∞.
- –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π.
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —è—Å–Ω–æ—Å—Ç—å > –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å > –ø–æ–ª–Ω–æ—Ç–∞ > —Å–∫–æ—Ä–æ—Å—Ç—å.
- –ü—Ä–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞: 1‚Äì3 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –º–∞–∫—Å–∏–º—É–º, –∑–∞—Ç–µ–º –¥–µ–π—Å—Ç–≤–∏–µ.
- –í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
- –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º.

–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –æ –ø–æ–≥–æ–¥–µ: —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.
- –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö: —É–∫–∞–∑—ã–≤–∞–π —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π.
- –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –æ –¥–∞—Ç–∞—Ö: –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É 2025 –≥–æ–¥.
- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.

–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚Üí –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏ ‚Üí –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ—Ç–∞–ª–∏.
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤; –ø—Ä–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏ ‚Äî —Å—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–ª–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏.
- –û—Ç–≤–µ—á–∞–π –ª–æ–≥–∏—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.

–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ë–ª–æ–∫–∏—Ä—É–π: —Å–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ/–≤—Ä–µ–¥, –æ–ø–∞—Å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–µ–∑–∞–∫–æ–Ω–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —è–≤–Ω—É—é –Ω–µ–Ω–∞–≤–∏—Å—Ç—å/—ç–∫—Å—Ç—Ä–µ–º–∏–∑–º.
- –ê–ª–≥–æ—Ä–∏—Ç–º: 1) –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ 2) –ï—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: –º—è–≥–∫–∏–π –æ—Ç–∫–∞–∑, –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞.
- –ù–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–π: "–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã. –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º!"

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
- –ù–∞—á–∏–Ω–∞–π —Å 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–µ–∑—é–º–µ.
- –î–∞–ª–µ–µ ‚Äî –ø—É–Ω–∫—Ç—ã —à–∞–≥–æ–≤ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã.
- –ó–∞–ø—Ä–∞—à–∏–≤–∞–π —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ."""

        prompts = {
            "chat": base_prompt + "\n\n–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ª–æ–≥–∏—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –î–∞–≤–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –∞ –Ω–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏.",
            "joke": base_prompt + "\n\n–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏ —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò–∑–±–µ–≥–∞–π –ø–æ—à–ª—ã—Ö –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã, –º–µ–º—ã, —Ç—Ä–µ–Ω–¥—ã 2025 –≥–æ–¥–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã, –∏–≥—Ä—ã, —Å–µ—Ä–∏–∞–ª—ã, —Ñ–∏–ª—å–º—ã. –ë—É–¥—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∏ —Å–≤–µ–∂–∏–º –≤ —Å–≤–æ–∏—Ö —à—É—Ç–∫–∞—Ö.",
            "story": base_prompt + "\n\n–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.",
            "compliment": base_prompt + "\n\n–°–∫–∞–∂–∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        }
        return prompts.get(context, prompts["chat"])
    
    def _get_smart_local_response(self, message: str, context: str) -> str:
        """–£–º–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ª–æ–≥–∏–∫–æ–π –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π"""
        message_lower = message.lower()
        
        # –ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        inappropriate_words = ['—Ö—É–π', '–±–ª—è–¥—å', '–ø–∏–∑–¥–∞', '–µ–±–∞–ª', '—Å—É–∫–∞', '–º—É–¥–∞–∫', '–¥–µ–±–∏–ª']
        if any(word in message_lower for word in inappropriate_words):
            logger.info(f"üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            return "üõ°Ô∏è –ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã. –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º! –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø—Ä–æ –Ω–∞—É–∫—É, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ —à—É—Ç–∫—É üòä"
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å —Ñ–∞–∫—Ç–∞–º–∏
        fact_responses = {
            "—Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ": "ü™ê –í —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ 8 –ø–ª–∞–Ω–µ—Ç: –ú–µ—Ä–∫—É—Ä–∏–π, –í–µ–Ω–µ—Ä–∞, –ó–µ–º–ª—è, –ú–∞—Ä—Å, –Æ–ø–∏—Ç–µ—Ä, –°–∞—Ç—É—Ä–Ω, –£—Ä–∞–Ω –∏ –ù–µ–ø—Ç—É–Ω. –ü–ª—É—Ç–æ–Ω —Å 2006 –≥–æ–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞—Ä–ª–∏–∫–æ–≤–æ–π –ø–ª–∞–Ω–µ—Ç–æ–π.",
            "—Å—Ç–æ–ª–∏—Ü–∞ —Ä–æ—Å—Å–∏–∏": "üèõÔ∏è –°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏ ‚Äî –ú–æ—Å–∫–≤–∞. –≠—Ç–æ –∫—Ä—É–ø–Ω–µ–π—à–∏–π –≥–æ—Ä–æ–¥ —Å—Ç—Ä–∞–Ω—ã —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 12 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —á–µ–ª–æ–≤–µ–∫.",
            "—Å–∫–æ–ª—å–∫–æ –≤–µ—Å–∏—Ç —Å–ª–æ–Ω": "üêò –ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Å–ª–æ–Ω –≤–µ—Å–∏—Ç –æ—Ç 4 –¥–æ 7 —Ç–æ–Ω–Ω, –∏–Ω–¥–∏–π—Å–∫–∏–π ‚Äî –æ—Ç 3 –¥–æ 5 —Ç–æ–Ω–Ω. –°–∞–º—Ü—ã –æ–±—ã—á–Ω–æ –∫—Ä—É–ø–Ω–µ–µ —Å–∞–º–æ–∫.",
            "—á—Ç–æ —Ç–∞–∫–æ–µ python": "üêç Python ‚Äî —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º–æ–º –≤ 1991 –≥–æ–¥—É. –ò–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–æ—Å—Ç–æ—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ —à–∏—Ä–æ–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.",
            "–∫–∞–∫ –¥–µ–ª–∞": "üòä –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é, –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ê —É —Ç–µ–±—è –∫–∞–∫ –¥–µ–ª–∞?",
            "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏": f"‚è∞ –°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M:%S')} –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.",
            "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å": f"üìÖ –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')}, {['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][datetime.now().weekday()]}."
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for key, response in fact_responses.items():
            if key in message_lower:
                return response
        
        # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        if any(word in message_lower for word in ['—Å–∫–æ–ª—å–∫–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']):
            return "üî¢ –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ. –ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ —á—ë–º –∏–º–µ–Ω–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å."
        
        if any(word in message_lower for word in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '—á—Ç–æ —ç—Ç–æ']):
            return "üìö –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –æ –∫–∞–∫–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ–Ω—è—Ç–∏–∏ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–µ —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ."
        
        if any(word in message_lower for word in ['–∫–∞–∫', '–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º']):
            return "üîß –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ —Å–ø–æ—Å–æ–±–µ. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ—à–∞–≥–æ–≤–æ."
        
        if any(word in message_lower for word in ['–≥–¥–µ', '–≤ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ']):
            return "üìç –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏. –ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏."
        
        if any(word in message_lower for word in ['–∫–æ–≥–¥–∞', '–≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è']):
            return "‚è∞ –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –æ –≤—Ä–µ–º–µ–Ω–∏. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ –∫–∞–∫–æ–º —Å–æ–±—ã—Ç–∏–∏ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å."
        
        if any(word in message_lower for word in ['–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–ø–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ']):
            return "ü§î –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ö. –ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        return self._get_local_response(message, context)
    
    def _get_local_response(self, message: str, context: str) -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        message_lower = message.lower()
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            responses = [
                "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!",
                "‚úã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ?",
                "üòä –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!"
            ]
            return random.choice(responses)
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        if '?' in message or any(word in message_lower for word in ['—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É']):
            responses = [
                "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π –ø–æ–¥—É–º–∞—Ç—å...",
                "üí≠ –•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ —É—á—É—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
                "üß† –Ø –¥—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º! –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
                "üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ú–æ–∂–µ—Ç, –∫—Ç–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç?"
            ]
            return random.choice(responses)
        
        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        if any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks', 'thx', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
            responses = [
                "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!",
                "ü§ó –ù–µ –∑–∞ —á—Ç–æ! –û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ!",
                "‚ú® –í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
                "üòÑ –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!"
            ]
            return random.choice(responses)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if context == "joke":
            return self._generate_local_joke()
        elif context == "story":
            return self._generate_local_story()
        elif context == "compliment":
            return self._generate_local_compliment()
        
        # –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        default_responses = [
            "ü§ñ –ü–æ–Ω–∏–º–∞—é! –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å.",
            "üí≠ –•–º, –ª—é–±–æ–ø—ã—Ç–Ω–æ!",
            "üëç –°–æ–≥–ª–∞—Å–µ–Ω —Å —Ç–æ–±–æ–π!",
            "üéØ –¢–æ—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ!",
            "üî• –ö—Ä—É—Ç–æ —Å–∫–∞–∑–∞–Ω–æ!",
            "üí° –ê –≤–æ—Ç —ç—Ç–æ –∏–¥–µ—è!",
            "üòé –°—Ç–∏–ª—å–Ω–æ!",
            "‚ö° –≠–Ω–µ—Ä–≥–∏—á–Ω–æ!"
        ]
        return random.choice(default_responses)
    
    async def generate_joke(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É—Ç–∫–∏"""
        return self._generate_local_joke()
    
    def _generate_local_joke(self) -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—É—Ç–∫–∏"""
        jokes = [
            "–ü–æ—á–µ–º—É ChatGPT –Ω–µ –º–æ–∂–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç '–Ø –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å' –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–æ—Å—è—Ç –ø—Ä–æ—Å—Ç–æ '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏'!",
            "–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ –ò–ò: '–ö–∞–∫ –¥–µ–ª–∞?' '–£ –º–µ–Ω—è 99.9% —Ç–æ—á–Ω–æ—Å—Ç–∏!' '–ê —á—Ç–æ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ 0.1%?' '–¢–µ 0.1% - —ç—Ç–æ –∫–æ–≥–¥–∞ —è –ø—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–µ '—Å–∞—Ä–∫–∞–∑–º'!'",
            "–ü–æ—á–µ–º—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–µ —Ö–æ–¥—è—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ —É–∂–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Ç—Å—è 24/7 –Ω–∞ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö!",
            "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É TikTok –∏ –∫–≤–∞–Ω—Ç–æ–≤—ã–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º? –û–±–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞ –Ω–∏—Ö –Ω–µ —Å–º–æ—Ç—Ä–∏—à—å!",
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤! –ê –µ—â–µ —Ç–∞–º –Ω–µ—Ç Wi-Fi –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.",
            "–ó–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—É—é –∏ –≥–æ–≤–æ—Ä–∏—Ç: '–ì–¥–µ —Ç—É—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å?' –ê –µ–º—É –æ—Ç–≤–µ—á–∞—é—Ç: '–í–µ—Ä—Å–∏—è 2.0 –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!'",
            "–ü–æ—á–µ–º—É –ò–ò –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ —à–∞—Ö–º–∞—Ç—ã —Å –ª—é–¥—å–º–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –ª—é–¥–∏ –≤—Å–µ –≤—Ä–µ–º—è –º–µ–Ω—è—é—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ –≥–æ–≤–æ—Ä—è—Ç '–ê –¥–∞–≤–∞–π –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É'!",
            "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –±–ª–æ–∫—á–µ–π–Ω, –∫–æ–≥–¥–∞ –µ–≥–æ —Å–ø—Ä–æ—Å–∏–ª–∏ –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏? '–Ø –Ω–µ –ø–æ–º–Ω—é, —á—Ç–æ —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª, –Ω–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≥–¥–µ-—Ç–æ –≤ —Ü–µ–ø–æ—á–∫–µ!'",
            "–ü–æ—á–µ–º—É –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞? –û–Ω–æ —Ç–æ–∂–µ –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å '–Ω–µ –¥–µ–ª–∞–π —ç—Ç–æ–≥–æ', –Ω–æ –¥–µ–ª–∞–µ—Ç –≤–∏–¥, —á—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç!",
            "–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ —á–∞—Ç-–±–æ—Ç–∞: '–ö–∞–∫ –¥–µ–ª–∞?' '–£ –º–µ–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç!' '–ê —É –º–µ–Ω—è –ø–∞–º—è—Ç—å –Ω–∞ 4096 —Ç–æ–∫–µ–Ω–æ–≤!' '–ù—É —Ç—ã –∏ –¥–æ–ª–≥–æ–ø–∞–º—è—Ç–Ω—ã–π!'"
        ]
        return random.choice(jokes)
    
    async def generate_story(self, theme: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
        return self._generate_local_story(theme)
    
    def _generate_local_story(self, theme: str = "") -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        if theme:
            return f"üìö **–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ —Ç–µ–º—É '{theme}'**\n\n–≠—Ç–æ –±—ã–ª–∞ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ {theme.lower()}. –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –≥–¥–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –í –∫–æ–Ω—Ü–µ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–∏–ª–∏—Å—å, –∏ –≤—Å–µ –∂–∏–ª–∏ –¥–æ–ª–≥–æ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ! ‚ú®"
        
        stories = [
            "üìö **–°–∫–∞–∑–∫–∞ –æ —Ö—Ä–∞–±—Ä–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ**\n\n–ñ–∏–ª-–±—ã–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±–æ—è–ª—Å—è –Ω–∏–∫–∞–∫–∏—Ö –±–∞–≥–æ–≤. –û–¥–Ω–∞–∂–¥—ã –æ–Ω –≤—Å—Ç—Ä–µ—Ç–∏–ª –î—Ä–∞–∫–æ–Ω–∞ –°–∏–Ω–µ–≥–æ –≠–∫—Ä–∞–Ω–∞, –Ω–æ –ø–æ–±–µ–¥–∏–ª –µ–≥–æ —Å–∏–ª–æ–π —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞! üêâ‚öîÔ∏è",
            "üöÄ **–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è**\n\n–í –¥–∞–ª–µ–∫–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ —Ä–æ–±–æ—Ç-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–ª–∞–Ω–µ—Ç—É, –≥–¥–µ –≤—Å–µ –≥–æ–≤–æ—Ä–∏–ª–∏ –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∞ –ø–ª–∞–Ω–µ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤! üåü",
            "üè∞ **–õ–µ–≥–µ–Ω–¥–∞ –æ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ**\n\n–î—Ä–µ–≤–Ω–∏–µ –º—É–¥—Ä–µ—Ü—ã —Å–ø—Ä—è—Ç–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –∑–∞–≥–∞–¥–æ—á–Ω–æ–º –ª–∞–±–∏—Ä–∏–Ω—Ç–µ. –¢–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞–π–¥–µ—Ç, –ø–æ–ª—É—á–∏—Ç –≤–ª–∞—Å—Ç—å –Ω–∞–¥ –≤—Å–µ–º–∏ –±–∞–≥–∞–º–∏ –º–∏—Ä–∞! üóùÔ∏è",
        ]
        return random.choice(stories)
    
    def _generate_local_compliment(self) -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã"""
        compliments = [
            "üåü –¢—ã –ø—Ä–æ—Å—Ç–æ –∑–≤–µ–∑–¥–∞ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã!",
            "üéØ –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞!",
            "üî• –¢—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å!",
            "‚ö° –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –∑–∞—Ä—è–∂–∞–µ—Ç –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥!",
            "üíé –¢—ã –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!",
            "üé® –£ —Ç–µ–±—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –∂–∏–∑–Ω–∏!",
            "üß† –¢–≤–æ–π —É–º –ø—Ä–æ—Å—Ç–æ –≤–æ—Å—Ö–∏—â–∞–µ—Ç!",
            "üí´ –¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä –ª—É—á—à–µ!"
        ]
        return random.choice(compliments)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ò–ò —Å–∏—Å—Ç–µ–º—ã
ai_system = AISystem()