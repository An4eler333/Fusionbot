"""
–°–∏—Å—Ç–µ–º–∞ –ò–ò –¥–ª—è VK –ë–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""
import os
import logging
import asyncio
import random
import aiohttp
import json
from typing import Optional

logger = logging.getLogger(__name__)

class AISystem:
    """–°–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.groq_api_key = os.getenv('GROQ_API_KEY')
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.huggingface_api_key = os.getenv('HUGGINGFACE_API_KEY')
        logger.info("üß† –ò–ò —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def get_ai_response(self, message: str, context: str = "chat") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å fallback —Å–∏—Å—Ç–µ–º–æ–π"""
        try:
            # –ü—Ä–æ–±—É–µ–º Groq API (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
            if self.groq_api_key:
                response = await self._call_groq(message, context)
                if response:
                    return response
            
            # Fallback - –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            return self._get_local_response(message, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
            return self._get_local_response(message, context)
    
    async def _call_groq(self, message: str, context: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ Groq API"""
        if not self.groq_api_key:
            logger.info("Groq API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
            
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': f'Bearer {self.groq_api_key}',
                    'Content-Type': 'application/json'
                }
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                system_prompt = self._get_system_prompt(context)
                
                data = {
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": message}
                    ],
                    "model": "llama3-8b-8192",
                    "temperature": 0.7,
                    "max_tokens": 500
                }
                
                async with session.post(
                    'https://api.groq.com/openai/v1/chat/completions',
                    headers=headers,
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        ai_response = result['choices'][0]['message']['content']
                        logger.info("‚úÖ Groq API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                        return ai_response
                    else:
                        logger.warning(f"Groq API –æ—à–∏–±–∫–∞: {response.status}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.warning("Groq API —Ç–∞–π–º–∞—É—Ç")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Groq API: {e}")
            return None
    
    def _get_system_prompt(self, context: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        prompts = {
            "chat": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ VK —á–∞—Ç–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –≤–µ—Å–µ–ª–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.",
            "joke": "–¢—ã –º–∞—Å—Ç–µ—Ä —à—É—Ç–æ–∫. –ü—Ä–∏–¥—É–º–∞–π —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —ç–º–æ–¥–∑–∏.",
            "story": "–¢—ã —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —ç–º–æ–¥–∑–∏.",
            "compliment": "–¢—ã –º–∞—Å—Ç–µ—Ä –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤. –°–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –∏ –æ–±–æ–¥—Ä—è—é—â–µ–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —ç–º–æ–¥–∑–∏."
        }
        return prompts.get(context, prompts["chat"])
    
    def _get_local_response(self, message: str, context: str) -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        message_lower = message.lower()
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            responses = [
                "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!",
                "‚úã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ?",
                "üòä –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!"
            ]
            return random.choice(responses)
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        if '?' in message or any(word in message_lower for word in ['—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É']):
            responses = [
                "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π –ø–æ–¥—É–º–∞—Ç—å...",
                "üí≠ –•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ —É—á—É—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
                "üß† –Ø –¥—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º! –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
                "üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ú–æ–∂–µ—Ç, –∫—Ç–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç?"
            ]
            return random.choice(responses)
        
        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        if any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks', 'thx', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
            responses = [
                "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!",
                "ü§ó –ù–µ –∑–∞ —á—Ç–æ! –û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ!",
                "‚ú® –í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
                "üòÑ –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!"
            ]
            return random.choice(responses)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if context == "joke":
            return self._generate_local_joke()
        elif context == "story":
            return self._generate_local_story()
        elif context == "compliment":
            return self._generate_local_compliment()
        
        # –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        default_responses = [
            "ü§ñ –ü–æ–Ω–∏–º–∞—é! –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å.",
            "üí≠ –•–º, –ª—é–±–æ–ø—ã—Ç–Ω–æ!",
            "üëç –°–æ–≥–ª–∞—Å–µ–Ω —Å —Ç–æ–±–æ–π!",
            "üéØ –¢–æ—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ!",
            "üî• –ö—Ä—É—Ç–æ —Å–∫–∞–∑–∞–Ω–æ!",
            "üí° –ê –≤–æ—Ç —ç—Ç–æ –∏–¥–µ—è!",
            "üòé –°—Ç–∏–ª—å–Ω–æ!",
            "‚ö° –≠–Ω–µ—Ä–≥–∏—á–Ω–æ!"
        ]
        return random.choice(default_responses)
    
    async def generate_joke(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É—Ç–∫–∏"""
        return self._generate_local_joke()
    
    def _generate_local_joke(self) -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–µ —à—É—Ç–∫–∏"""
        jokes = [
            "üòÇ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É?\n‚Äî –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤!",
            "ü§ñ –í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ —Ä–æ–±–æ—Ç–∞:\n‚Äî –ö–∞–∫ –¥–µ–ª–∞?\n‚Äî 01001000 01101001!\n‚Äî –ü–æ–Ω—è—Ç–Ω–æ, –ø–ª–æ—Ö–æ –¥–µ–ª–∞...",
            "üòÑ –ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –∏ –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–º?\n‚Äî –û–±–∞ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ñ–µ –≤ –∫–æ–¥!",
            "üé≠ –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –±–∞—Ä –∏ –≥–æ–≤–æ—Ä–∏—Ç:\n‚Äî –î–∞–π—Ç–µ –º–Ω–µ –ø–∏–≤–æ!\n‚Äî –ö–∞–∫–æ–µ?\n‚Äî –î–∞ –ª—é–±–æ–µ, —è –Ω–µ –ø—Ä–∏–≤–µ—Ä–µ–¥–ª–∏–≤—ã–π!\n‚Äî –ê –≤–æ—Ç –∫–æ–¥—ã —É –≤–∞—Å –ø—Ä–∏–≤–µ—Ä–µ–¥–ª–∏–≤—ã–µ!",
            "üíª –ü–æ—á–µ–º—É —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –≥—Ä—è–∑–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞?\n‚Äî –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±–∞–≥–∏ –¥–∞–≤—è—Ç!",
            "üêõ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–æ–º–æ–π –ø–æ–∑–¥–Ω–æ.\n‚Äî –ì–¥–µ –±—ã–ª?\n‚Äî –ù–∞ —Ä–∞–±–æ—Ç–µ –±–∞–≥ –ª–æ–≤–∏–ª.\n‚Äî –ü–æ–π–º–∞–ª?\n‚Äî –ù–µ—Ç, –Ω–æ –∑–∞–≤—ë–ª –µ—â—ë —Ç—Ä–æ–∏—Ö!",
        ]
        return random.choice(jokes)
    
    async def generate_story(self, theme: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
        return self._generate_local_story(theme)
    
    def _generate_local_story(self, theme: str = "") -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        if theme:
            return f"üìö **–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ —Ç–µ–º—É '{theme}'**\n\n–≠—Ç–æ –±—ã–ª–∞ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ {theme.lower()}. –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –≥–¥–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –í –∫–æ–Ω—Ü–µ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–∏–ª–∏—Å—å, –∏ –≤—Å–µ –∂–∏–ª–∏ –¥–æ–ª–≥–æ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ! ‚ú®"
        
        stories = [
            "üìö **–°–∫–∞–∑–∫–∞ –æ —Ö—Ä–∞–±—Ä–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ**\n\n–ñ–∏–ª-–±—ã–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±–æ—è–ª—Å—è –Ω–∏–∫–∞–∫–∏—Ö –±–∞–≥–æ–≤. –û–¥–Ω–∞–∂–¥—ã –æ–Ω –≤—Å—Ç—Ä–µ—Ç–∏–ª –î—Ä–∞–∫–æ–Ω–∞ –°–∏–Ω–µ–≥–æ –≠–∫—Ä–∞–Ω–∞, –Ω–æ –ø–æ–±–µ–¥–∏–ª –µ–≥–æ —Å–∏–ª–æ–π —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞! üêâ‚öîÔ∏è",
            "üöÄ **–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è**\n\n–í –¥–∞–ª–µ–∫–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ —Ä–æ–±–æ—Ç-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–ª–∞–Ω–µ—Ç—É, –≥–¥–µ –≤—Å–µ –≥–æ–≤–æ—Ä–∏–ª–∏ –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∞ –ø–ª–∞–Ω–µ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤! üåü",
            "üè∞ **–õ–µ–≥–µ–Ω–¥–∞ –æ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ**\n\n–î—Ä–µ–≤–Ω–∏–µ –º—É–¥—Ä–µ—Ü—ã —Å–ø—Ä—è—Ç–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –∑–∞–≥–∞–¥–æ—á–Ω–æ–º –ª–∞–±–∏—Ä–∏–Ω—Ç–µ. –¢–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞–π–¥–µ—Ç, –ø–æ–ª—É—á–∏—Ç –≤–ª–∞—Å—Ç—å –Ω–∞–¥ –≤—Å–µ–º–∏ –±–∞–≥–∞–º–∏ –º–∏—Ä–∞! üóùÔ∏è",
        ]
        return random.choice(stories)
    
    def _generate_local_compliment(self) -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã"""
        compliments = [
            "üåü –¢—ã –ø—Ä–æ—Å—Ç–æ –∑–≤–µ–∑–¥–∞ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã!",
            "üéØ –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞!",
            "üî• –¢—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å!",
            "‚ö° –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –∑–∞—Ä—è–∂–∞–µ—Ç –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥!",
            "üíé –¢—ã –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!",
            "üé® –£ —Ç–µ–±—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –∂–∏–∑–Ω–∏!",
            "üß† –¢–≤–æ–π —É–º –ø—Ä–æ—Å—Ç–æ –≤–æ—Å—Ö–∏—â–∞–µ—Ç!",
            "üí´ –¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä –ª—É—á—à–µ!"
        ]
        return random.choice(compliments)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ò–ò —Å–∏—Å—Ç–µ–º—ã
ai_system = AISystem()