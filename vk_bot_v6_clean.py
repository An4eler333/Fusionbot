#!/usr/bin/env python3
"""
VK –ë–æ—Ç - –ß–ò–°–¢–ê–Ø –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±–µ—Å–µ–¥–∞—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Bots Long Poll –∏ OpenRouter –ò–ò
"""
import os
import asyncio
import logging
import time
import random
import requests
from datetime import datetime
from typing import Dict, List, Optional

from dotenv import load_dotenv

from database import db
from ai_system import ai_system
from console_admin import console_admin
from moderation_system import ModerationSystem

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('–¢–û–ö–ï–ù–´.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VKBotClean:
    """VK –ë–æ—Ç —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –¥–ª—è –±–µ—Å–µ–¥"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.vk_token = os.getenv('VK_TOKEN')
        self.group_id = int(os.getenv('VK_GROUP_ID', 0))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
        if not self.vk_token or not self.group_id:
            logger.error("‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            raise ValueError("–¢–æ–∫–µ–Ω—ã VK –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Long Poll –¥–ª—è –≥—Ä—É–ø–ø
        self._init_group_longpoll()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.moderation = ModerationSystem(self.vk_token, self.group_id)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = datetime.now()
        self.messages_processed = 0
        self._last_send_time = 0.0
        
        logger.info(f"ü§ñ VK –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. ID –≥—Ä—É–ø–ø—ã: {self.group_id}")
        logger.info(f"üéØ –†–∞–±–æ—Ç–∞–µ–º –≤ –±–µ—Å–µ–¥–∞—Ö —á–µ—Ä–µ–∑ Bots Long Poll")
        logger.info(f"üß† –ò–ò —Å–∏—Å—Ç–µ–º–∞: OpenRouter")
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite")
    
    def _init_group_longpoll(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Group Long Poll"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Long Poll –¥–ª—è –≥—Ä—É–ø–ø—ã
            response = requests.get(
                'https://api.vk.com/method/groups.getLongPollServer',
                params={
                    'group_id': self.group_id,
                    'access_token': self.vk_token,
                    'v': '5.199'
                }
            )
            
            data = response.json()
            if 'response' in data:
                self.longpoll_server = data['response']['server']
                self.longpoll_key = data['response']['key']
                self.longpoll_ts = data['response']['ts']
                logger.info("‚úÖ Group Long Poll –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                logger.info(f"üîÑ –°–µ—Ä–≤–µ—Ä: {self.longpoll_server}")
                logger.info(f"üîë –ö–ª—é—á: {self.longpoll_key[:20]}...")
                logger.info(f"‚è∞ TS: {self.longpoll_ts}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Long Poll: {data}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Long Poll")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Long Poll: {e}")
            raise
    
    def is_vk_group_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º VK –≥—Ä—É–ø–ø—ã"""
        try:
            response = requests.get(
                'https://api.vk.com/method/groups.getMembers',
                params={
                    'group_id': self.group_id,
                    'filter': 'managers',
                    'access_token': self.vk_token,
                    'v': '5.199'
                }
            )
            
            data = response.json()
            if 'response' in data and 'items' in data['response']:
                admin_ids = data['response']['items']
                return user_id in admin_ids
            
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ VK –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    def get_user_permissions(self, user_id: int, peer_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (VK –∞–¥–º–∏–Ω + —Ä–∞–Ω–≥ –≤ –±–æ—Ç–µ)"""
        permissions = {
            'is_vk_admin': False,
            'is_bot_admin': False,
            'rank_level': 1,
            'rank_name': 'ü•â –ù–æ–≤–∏—á–æ–∫',
            'permissions': ['chat']
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º VK –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∞
            permissions['is_vk_admin'] = self.is_vk_group_admin(user_id)
            
            # –ï—Å–ª–∏ VK –∞–¥–º–∏–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
            if permissions['is_vk_admin']:
                permissions['is_bot_admin'] = True
                permissions['rank_level'] = 10
                permissions['rank_name'] = 'üöÄ –ö–æ—Å–º–æ—Å'
                permissions['permissions'] = [
                    'chat', 'voice', 'reactions', 'jokes', 'games', 
                    'mentions', 'moderate', 'warn', 'mute', 'kick', 'ban'
                ]
                return permissions
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω–≥ –≤ –±–æ—Ç–µ
            user_data = db.get_user(user_id)
            if user_data:
                rank_info = db.get_rank_info(user_data.get('rank_level', 1))
                permissions['rank_level'] = user_data.get('rank_level', 1)
                permissions['rank_name'] = rank_info['name']
                permissions['permissions'] = rank_info['permissions']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–µ—Å–µ–¥–µ
            chat_id = peer_id - 2000000000
            if db.is_admin(user_id, chat_id):
                permissions['is_bot_admin'] = True
                # –ê–¥–º–∏–Ω—ã –±–µ—Å–µ–¥—ã –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∞–≤–∞ 8+ —Ä–∞–Ω–≥–∞
                if permissions['rank_level'] < 8:
                    permissions['rank_level'] = 8
                    permissions['rank_name'] = 'üëë –ö–æ—Ä–æ–ª—å'
                    permissions['permissions'] = [
                        'chat', 'voice', 'reactions', 'jokes', 'games', 
                        'mentions', 'moderate', 'warn', 'mute'
                    ]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        return permissions
    
    def send_message(self, peer_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥—É"""
        try:
            # Rate limiting: –Ω–µ —á–∞—â–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 3 —Å–µ–∫—É–Ω–¥—ã
            elapsed = time.time() - self._last_send_time
            if elapsed < 3.0:
                time.sleep(max(0.0, 3.0 - elapsed))

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (VK –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(message) > 4000:
                message = message[:4000] + "..."
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤")
            response = requests.get(
                'https://api.vk.com/method/messages.send',
                params={
                    'peer_id': peer_id,
                    'message': message,
                    'access_token': self.vk_token,
                    'v': '5.199',
                    'random_id': int(time.time() * 1000)
                }
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code != 200:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
            try:
                data = response.json()
                if 'response' in data:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {peer_id}")
                    self._last_send_time = time.time()
                    return True
                elif 'error' in data:
                    logger.error(f"‚ùå VK API –æ—à–∏–±–∫–∞: {data['error']}")
                    self._last_send_time = time.time()
                    return False
                else:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç VK API: {data}")
                    self._last_send_time = time.time()
                    return False
            except ValueError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, –æ—Ç–≤–µ—Ç: {response.text[:200]}")
                self._last_send_time = time.time()
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def process_message(self, message_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Long Poll"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id = message_data.get('from_id', 0)
            peer_id = message_data.get('peer_id', 0)
            text = message_data.get('text', '')
            timestamp = message_data.get('date', 0)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
            logger.info(f"   –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            logger.info(f"   –í —á–∞—Ç: {peer_id}")
            logger.info(f"   –¢–µ–∫—Å—Ç: '{text}'")
            logger.info(f"   –í—Ä–µ–º—è: {datetime.fromtimestamp(timestamp)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
            if peer_id > 2000000000:
                chat_type = "üó£Ô∏è –ë–ï–°–ï–î–ê"
                chat_id = peer_id - 2000000000
                logger.info(f"   ‚úÖ –¢–ò–ü: {chat_type} (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID: {chat_id})")
            else:
                chat_type = "üë§ –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø"
                logger.info(f"   ‚úÖ –¢–ò–ü: {chat_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_status = self.moderation.check_user_status(user_id)
            if user_status["status"] != "ok":
                self.send_message(peer_id, user_status["message"])
                return
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = {"first_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "last_name": "VK"}
            db.create_or_update_user(user_id, user_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            db.add_experience(user_id, 1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥
            if db.update_rank(user_id):
                user_rank = db.get_user_rank(user_id)
                self.send_message(peer_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥: {user_rank['rank']}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            self.handle_commands(text, user_id, peer_id, chat_type)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.messages_processed += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_commands(self, text: str, user_id: int, peer_id: int, chat_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        message_lower = text.lower().strip()
        
        try:
            if message_lower in ['—Ç–µ—Å—Ç', 'test']:
                response = f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–µ–¥–∞—Ö!\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n–¢–∏–ø: {chat_type}\nID: {peer_id}"
                self.send_message(peer_id, response)
                
            elif message_lower in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã']:
                help_text = """ü§ñ **Fusionbot v6.1 - –ö–æ–º–∞–Ω–¥—ã:**

**üß† –ò–ò –∫–æ–º–∞–Ω–¥—ã (OpenRouter):**
‚Ä¢ `–∏–∏ [–≤–æ–ø—Ä–æ—Å]` - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò
‚Ä¢ `—à—É—Ç–∫–∞` - –ü–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É
‚Ä¢ `–∏—Å—Ç–æ—Ä–∏—è` - –°–ª—É—á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ `–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç` - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
‚Ä¢ `–≤—Ä–µ–º—è` - –£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è
‚Ä¢ `–∫–∞–∫ –¥–µ–ª–∞` - –°–ø—Ä–æ—Å–∏—Ç—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
‚Ä¢ `—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ` - –£–∑–Ω–∞—Ç—å –æ –±–æ—Ç–µ

**üìä –†–∞–Ω–≥–∏ –∏ –æ–ø—ã—Ç:**
‚Ä¢ `—Ä–∞–Ω–≥` - –í–∞—à —Ä–∞–Ω–≥ –∏ –æ–ø—ã—Ç
‚Ä¢ `—Ç–æ–ø` - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `—Å—Ç–∞—Ç—É—Å` - –í–∞—à —Å—Ç–∞—Ç—É—Å

**üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**
‚Ä¢ `–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞` - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
‚Ä¢ `—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ` - –ò–≥—Ä–∞ —Å —á–∏—Å–ª–∞–º–∏
‚Ä¢ `–æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞` - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É

**üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ `—Ç–µ—Å—Ç` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã

**üîß –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤):**
‚Ä¢ `–∫–∏–∫ [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` - –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –±–µ—Å–µ–¥—ã
‚Ä¢ `–º—É—Ç [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–≤—Ä–µ–º—è]` - –ó–∞–º—É—Ç–∏—Ç—å
‚Ä¢ `–±–∞–Ω [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞]` - –ó–∞–±–∞–Ω–∏—Ç—å
‚Ä¢ `–≤–∞—Ä–Ω [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞]` - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ `—Ä–∞–∑–º—É—Ç [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` - –†–∞–∑–º—É—Ç–∏—Ç—å
‚Ä¢ `—Ä–∞–∑–±–∞–Ω [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` - –†–∞–∑–±–∞–Ω–∏—Ç—å

**‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:**
‚Ä¢ `–∞–¥–º–∏–Ω` - –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ `—Ä–∞–Ω–≥–∏` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–∞—Ö

**üëë VK –∞–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞!**"""
                self.send_message(peer_id, help_text)
                
            elif message_lower.startswith('–∏–∏ ') and len(text) > 3:
                question = text[3:].strip()
                logger.info(f"üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ò–ò –∑–∞–ø—Ä–æ—Å: {question}")
                ai_response = asyncio.run(ai_system.get_ai_response(question, "chat", user_id, peer_id))
                self.send_message(peer_id, f"üß† {ai_response}")
                
            elif message_lower in ['—à—É—Ç–∫–∞', 'joke']:
                joke = asyncio.run(ai_system.get_ai_response("–†–∞—Å—Å–∫–∞–∂–∏ —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É –∏–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç", "joke", user_id, peer_id))
                self.send_message(peer_id, f"üòÇ {joke}")
                
            elif message_lower in ['–∏—Å—Ç–æ—Ä–∏—è', 'story']:
                story = asyncio.run(ai_system.get_ai_response("–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é", "story", user_id, peer_id))
                self.send_message(peer_id, f"üìñ {story}")
                
            elif message_lower in ['–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç', 'compliment']:
                compliment = asyncio.run(ai_system.get_ai_response("–°–¥–µ–ª–∞–π –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", "compliment", user_id, peer_id))
                self.send_message(peer_id, f"üíù {compliment}")
                
            elif message_lower in ['–≤—Ä–µ–º—è', 'time']:
                time_response = asyncio.run(ai_system.get_ai_response("–°–∫–∞–∂–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", "chat", user_id, peer_id))
                self.send_message(peer_id, f"‚è∞ {time_response}")
                
            elif message_lower in ['–∫–∞–∫ –¥–µ–ª–∞', 'how are you']:
                mood_response = asyncio.run(ai_system.get_ai_response("–ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "chat", user_id, peer_id))
                self.send_message(peer_id, f"üòä {mood_response}")
                
            elif message_lower in ['—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', 'about you']:
                about_response = asyncio.run(ai_system.get_ai_response("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "chat", user_id, peer_id))
                self.send_message(peer_id, f"ü§ñ {about_response}")
                
            elif message_lower in ['—Ä–∞–Ω–≥', 'rank']:
                user_perms = self.get_user_permissions(user_id, peer_id)
                user_rank = db.get_user_rank(user_id)
                next_exp = user_rank.get('next_level_exp', 0)
                exp_to_next = next_exp - user_rank['experience'] if next_exp > 0 else 0
                
                admin_status = ""
                if user_perms['is_vk_admin']:
                    admin_status = "\nüëë **VK –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã**"
                elif user_perms['is_bot_admin']:
                    admin_status = "\nüîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã**"
                
                rank_info = f"""üìä **–í–∞—à —Ä–∞–Ω–≥: {user_perms['rank_name']}**
üíé –û–ø—ã—Ç: {user_rank['experience']}
üèÜ –£—Ä–æ–≤–µ–Ω—å: {user_rank['level']}
üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {exp_to_next} –æ–ø—ã—Ç–∞
üîë –ü—Ä–∞–≤–∞: {', '.join(user_perms['permissions'])}{admin_status}"""
                self.send_message(peer_id, rank_info)
                
            elif message_lower in ['—Ç–æ–ø', 'top']:
                top_users = db.get_top_users(10)
                if top_users:
                    top_text = "üèÜ **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É:**\n\n"
                    for i, user in enumerate(top_users, 1):
                        user_rank = db.get_user_rank(user['user_id'])
                        top_text += f"{i}. {user_rank['rank']} - {user['experience']} –æ–ø—ã—Ç–∞\n"
                    self.send_message(peer_id, top_text)
                else:
                    self.send_message(peer_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞")
                    
            elif message_lower in ['—Å—Ç–∞—Ç—É—Å', 'status']:
                user_status = self.moderation.check_user_status(user_id)
                user_rank = db.get_user_rank(user_id)
                warnings = db.get_warnings(user_id)
                
                status_text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å:**
{user_status['message']}

üìà **–†–∞–Ω–≥:** {user_rank['rank']}
üíé **–û–ø—ã—Ç:** {user_rank['experience']}
‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {warnings}/5"""
                self.send_message(peer_id, status_text)
                
            elif message_lower in ['—Ä–∞–Ω–≥–∏', 'ranks']:
                ranks_text = """üèÜ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤:**

ü•â **–ù–æ–≤–∏—á–æ–∫** (0+ –æ–ø—ã—Ç–∞) - –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞
üèÉ **–ê–∫—Ç–∏–≤–Ω—ã–π** (100+ –æ–ø—ã—Ç–∞) - –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
üí¨ **–ë–æ–ª—Ç—É–Ω** (300+ –æ–ø—ã—Ç–∞) - –†–µ–∞–∫—Ü–∏–∏
üé≠ **–®—É—Ç–Ω–∏–∫** (600+ –æ–ø—ã—Ç–∞) - –®—É—Ç–∫–∏
üéØ **–ú–µ—Ç–∫–∏–π** (1000+ –æ–ø—ã—Ç–∞) - –ò–≥—Ä—ã
‚≠ê **–ó–≤–µ–∑–¥–∞** (1500+ –æ–ø—ã—Ç–∞) - –£–ø–æ–º–∏–Ω–∞–Ω–∏—è
üî• **–õ–µ–≥–µ–Ω–¥–∞** (2500+ –æ–ø—ã—Ç–∞) - –ú–æ–¥–µ—Ä–∞—Ü–∏—è
üëë **–ö–æ—Ä–æ–ª—å** (4000+ –æ–ø—ã—Ç–∞) - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
üíé **–ê–ª–º–∞–∑** (6000+ –æ–ø—ã—Ç–∞) - –ú—É—Ç
üöÄ **–ö–æ—Å–º–æ—Å** (10000+ –æ–ø—ã—Ç–∞) - –ö–∏–∫ –∏ –±–∞–Ω

üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: +1 –∑–∞ –∫–∞–∂–¥–æ–µ
‚Ä¢ –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: +3-20
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +1-5"""
                self.send_message(peer_id, ranks_text)
                
            elif message_lower in ['–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞', 'quiz']:
                questions = [
                    {"q": "–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?", "a": "–º–æ—Å–∫–≤–∞", "options": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"]},
                    {"q": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "a": "8", "options": ["7", "8", "9", "10"]},
                    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?", "a": "—Ç–æ–ª—Å—Ç–æ–π", "options": ["–¢–æ–ª—Å—Ç–æ–π", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–ü—É—à–∫–∏–Ω", "–ß–µ—Ö–æ–≤"]},
                    {"q": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞?", "a": "—é–ø–∏—Ç–µ—Ä", "options": ["–ó–µ–º–ª—è", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–ù–µ–ø—Ç—É–Ω"]},
                    {"q": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω VK?", "a": "2006", "options": ["2004", "2005", "2006", "2007"]}
                ]
                question = random.choice(questions)
                quiz_text = f"üéØ **–í–∏–∫—Ç–æ—Ä–∏–Ω–∞:**\n\n{question['q']}\n\n"
                for i, option in enumerate(question['options'], 1):
                    quiz_text += f"{i}. {option}\n"
                quiz_text += "\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞!"
                self.send_message(peer_id, quiz_text)
                
            elif message_lower in ['—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ', 'guess']:
                number = random.randint(1, 100)
                self.send_message(peer_id, f"üé≤ **–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!**\n\n–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å! (–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ)")
                
            elif message_lower in ['–æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞', '–º–æ–Ω–µ—Ç–∫–∞', 'coin']:
                result = random.choice(['–æ—Ä—ë–ª', '—Ä–µ—à–∫–∞'])
                self.send_message(peer_id, f"ü™ô **–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É...**\n\nüéØ –í—ã–ø–∞–ª: **{result.upper()}**!")
                
            elif message_lower in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats']:
                uptime = datetime.now() - self.start_time
                stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}
üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_processed}
üéØ –¢–∏–ø —á–∞—Ç–∞: {chat_type}
üí¨ ID —á–∞—Ç–∞: {peer_id}
üîß –†–µ–∂–∏–º: Bots Long Poll

ü§ñ –ò–ò —Å–∏—Å—Ç–µ–º–∞: OpenRouter
üö´ –õ–æ–∫–∞–ª—å–Ω—ã–µ fallback –æ—Ç–∫–ª—é—á–µ–Ω—ã"""
                self.send_message(peer_id, stats_text)
                
            elif message_lower.startswith('–∫–∏–∫ ') and len(text) > 4:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∏–∫
                user_perms = self.get_user_permissions(user_id, peer_id)
                if 'kick' not in user_perms['permissions']:
                    self.send_message(peer_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∫–∏–∫–∞. –í–∞—à —Ä–∞–Ω–≥: {user_perms['rank_name']}")
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –∫–∏–∫–∞
                parts = text.split()
                if len(parts) >= 2:
                    target_user = self._parse_user_mention(parts[1])
                    if target_user:
                        result = self.moderation.kick_user(peer_id, target_user, user_id)
                        self.send_message(peer_id, result['message'])
                    else:
                        self.send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                else:
                    self.send_message(peer_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `–∫–∏–∫ @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`")
                    
            elif message_lower.startswith('–º—É—Ç ') and len(text) > 4:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –º—É—Ç
                user_perms = self.get_user_permissions(user_id, peer_id)
                if 'mute' not in user_perms['permissions']:
                    self.send_message(peer_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞. –í–∞—à —Ä–∞–Ω–≥: {user_perms['rank_name']}")
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –º—É—Ç–∞
                parts = text.split()
                if len(parts) >= 3:
                    target_user = self._parse_user_mention(parts[1])
                    try:
                        duration = int(parts[2])
                        reason = ' '.join(parts[3:]) if len(parts) > 3 else ""
                        if target_user:
                            result = self.moderation.mute_user(peer_id, target_user, user_id, duration, reason)
                            self.send_message(peer_id, result['message'])
                        else:
                            self.send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                    except ValueError:
                        self.send_message(peer_id, "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö")
                else:
                    self.send_message(peer_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `–º—É—Ç @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö] [–ø—Ä–∏—á–∏–Ω–∞]`")
                    
            elif message_lower.startswith('–±–∞–Ω ') and len(text) > 4:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω
                user_perms = self.get_user_permissions(user_id, peer_id)
                if 'ban' not in user_perms['permissions']:
                    self.send_message(peer_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞. –í–∞—à —Ä–∞–Ω–≥: {user_perms['rank_name']}")
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –±–∞–Ω–∞
                parts = text.split()
                if len(parts) >= 2:
                    target_user = self._parse_user_mention(parts[1])
                    reason = ' '.join(parts[2:]) if len(parts) > 2 else ""
                    if target_user:
                        result = self.moderation.ban_user(peer_id, target_user, user_id, reason)
                        self.send_message(peer_id, result['message'])
                    else:
                        self.send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                else:
                    self.send_message(peer_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `–±–∞–Ω @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ø—Ä–∏—á–∏–Ω–∞]`")
                    
            elif message_lower.startswith('–≤–∞—Ä–Ω ') and len(text) > 5:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                user_perms = self.get_user_permissions(user_id, peer_id)
                if 'warn' not in user_perms['permissions']:
                    self.send_message(peer_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –í–∞—à —Ä–∞–Ω–≥: {user_perms['rank_name']}")
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                parts = text.split()
                if len(parts) >= 2:
                    target_user = self._parse_user_mention(parts[1])
                    reason = ' '.join(parts[2:]) if len(parts) > 2 else ""
                    if target_user:
                        result = self.moderation.warn_user(peer_id, target_user, user_id, reason)
                        self.send_message(peer_id, result['message'])
                    else:
                        self.send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                else:
                    self.send_message(peer_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `–≤–∞—Ä–Ω @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ø—Ä–∏—á–∏–Ω–∞]`")
                    
            elif message_lower.startswith('—Ä–∞–∑–º—É—Ç ') and len(text) > 7:
                # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑–º—É—Ç–∞
                parts = text.split()
                if len(parts) >= 2:
                    target_user = self._parse_user_mention(parts[1])
                    if target_user:
                        if db.unmute_user(target_user):
                            self.send_message(peer_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω")
                        else:
                            self.send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ")
                    else:
                        self.send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                else:
                    self.send_message(peer_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `—Ä–∞–∑–º—É—Ç @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`")
                    
            elif message_lower.startswith('—Ä–∞–∑–±–∞–Ω ') and len(text) > 7:
                # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑–±–∞–Ω–∞
                parts = text.split()
                if len(parts) >= 2:
                    target_user = self._parse_user_mention(parts[1])
                    if target_user:
                        if db.unban_user(target_user):
                            self.send_message(peer_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω")
                        else:
                            self.send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ")
                    else:
                        self.send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                else:
                    self.send_message(peer_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `—Ä–∞–∑–±–∞–Ω @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`")
                    
            elif message_lower in ['–∞–¥–º–∏–Ω', 'admin']:
                user_perms = self.get_user_permissions(user_id, peer_id)
                
                if not user_perms['is_vk_admin'] and not user_perms['is_bot_admin']:
                    self.send_message(peer_id, f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à —Ä–∞–Ω–≥: {user_perms['rank_name']}")
                    return
                
                admin_type = "VK –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã" if user_perms['is_vk_admin'] else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã"
                admin_text = f"""üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã** ({admin_type}):

**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `—Ä–∞–Ω–≥` - –í–∞—à —Ä–∞–Ω–≥
‚Ä¢ `—Ç–æ–ø` - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**üß† –ò–ò:**
‚Ä¢ `–∏–∏ [–≤–æ–ø—Ä–æ—Å]` - –¢–µ—Å—Ç –ò–ò
‚Ä¢ `—à—É—Ç–∫–∞` - –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

**üîß –ú–æ–¥–µ—Ä–∞—Ü–∏—è:**
‚Ä¢ `–∫–∏–∫ @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å` - –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –±–µ—Å–µ–¥—ã
‚Ä¢ `–º—É—Ç @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–≤—Ä–µ–º—è]` - –ó–∞–º—É—Ç–∏—Ç—å
‚Ä¢ `–±–∞–Ω @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ø—Ä–∏—á–∏–Ω–∞]` - –ó–∞–±–∞–Ω–∏—Ç—å
‚Ä¢ `–≤–∞—Ä–Ω @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ø—Ä–∏—á–∏–Ω–∞]` - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ `—Ä–∞–∑–º—É—Ç @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å` - –†–∞–∑–º—É—Ç–∏—Ç—å
‚Ä¢ `—Ä–∞–∑–±–∞–Ω @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å` - –†–∞–∑–±–∞–Ω–∏—Ç—å

**‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:**
‚Ä¢ `—Ç–µ—Å—Ç` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ `–ø–æ–º–æ—â—å` - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ `—Ä–∞–Ω–≥–∏` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–∞—Ö

**üîë –í–∞—à–∏ –ø—Ä–∞–≤–∞:** {', '.join(user_perms['permissions'])}"""
                self.send_message(peer_id, admin_text)
                
            elif any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
                self.send_message(peer_id, f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø VK –ë–æ—Ç —Å –ò–ò —Å–∏—Å—Ç–µ–º–æ–π. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
            
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–≤—Å–µ–≥–æ: {self.messages_processed})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            self.send_message(peer_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def _parse_user_mention(self, mention: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –£–±–∏—Ä–∞–µ–º @ –∏ [id
            if mention.startswith('@'):
                mention = mention[1:]
            if mention.startswith('[id'):
                mention = mention[3:]
            if '|' in mention:
                mention = mention.split('|')[0]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID
            user_id = int(mention)
            return user_id
        except (ValueError, IndexError):
            return None
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ VK –ë–æ—Ç–∞ —Å Bots Long Poll...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            response = requests.get(f"{self.longpoll_server}?act=a_check&key={self.longpoll_key}&ts={self.longpoll_ts}&wait=25")
            if response.status_code == 200:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Group Long Poll —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                return
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Long Poll: {e}")
            return
        
        logger.info("üëÇ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–µ—Å–µ–¥...")
        logger.info("üí° –ù–∞–ø–∏—à–∏—Ç–µ '—Ç–µ—Å—Ç' –≤ –±–µ—Å–µ–¥—É –≥–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                response = requests.get(
                    f"{self.longpoll_server}?act=a_check&key={self.longpoll_key}&ts={self.longpoll_ts}&wait=25"
                )
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('ts'):
                        self.longpoll_ts = data['ts']
                    
                    if 'updates' in data:
                        for update in data['updates']:
                            if update.get('type') == 'message_new':
                                self.process_message(update['object']['message'])
                                
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Long Poll: {response.status_code}")
                    time.sleep(5)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = VKBotClean()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
