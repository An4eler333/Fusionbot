#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Context7
"""
import os
import sys
import json
import subprocess
import logging
from datetime import datetime
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class Context7Manager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Context7"""
    
    def __init__(self):
        self.config_file = "context7_vk_config.json"
        self.cache_file = "context7_cache.json"
        self.last_update = None
        
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Context7"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def save_cache(self, data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info("–ö—ç—à –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def load_cache(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.info("–ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
            return {}
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return {}
    
    def check_context7_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Context7"""
        try:
            result = subprocess.run(
                ["npx", "-y", "@upstash/context7-mcp", "--version"],
                capture_output=True,
                text=True,
                timeout=30
            )
            if result.returncode == 0:
                logger.info("Context7 –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.warning(f"Context7 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result.stderr}")
                return False
        except subprocess.TimeoutExpired:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Context7")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Context7: {e}")
            return False
    
    def refresh_vk_api_docs(self) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ VK API"""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ VK API...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Context7
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        vk_docs = {
            "version": "5.199",
            "last_updated": datetime.now().isoformat(),
            "methods": {
                "messages": {
                    "send": {
                        "description": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
                        "parameters": ["peer_id", "message", "random_id"],
                        "example": "vk.messages.send(peer_id=2000000001, message='–ü—Ä–∏–≤–µ—Ç!', random_id=get_random_id())"
                    },
                    "getConversations": {
                        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥",
                        "parameters": ["count", "offset"],
                        "example": "vk.messages.getConversations(count=20)"
                    }
                },
                "users": {
                    "get": {
                        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö",
                        "parameters": ["user_ids", "fields"],
                        "example": "vk.users.get(user_ids=[1, 2, 3])"
                    }
                },
                "groups": {
                    "getById": {
                        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö",
                        "parameters": ["group_id", "fields"],
                        "example": "vk.groups.getById(group_id=1)"
                    }
                }
            },
            "rate_limits": {
                "requests_per_second": 3,
                "requests_per_day": 10000
            },
            "best_practices": [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Long Poll –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ rate limiting (3 —Å–µ–∫ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)",
                "–†–∞–±–æ—Ç–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å –±–µ—Å–µ–¥–∞–º–∏ (peer_id > 2000000000)",
                "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤"
            ]
        }
        
        return vk_docs
    
    def refresh_python_libs_docs(self) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Python –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Python –±–∏–±–ª–∏–æ—Ç–µ–∫...")
        
        python_docs = {
            "last_updated": datetime.now().isoformat(),
            "libraries": {
                "vk-api": {
                    "version": "11.10.0",
                    "description": "Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VK API",
                    "installation": "pip install vk-api==11.10.0",
                    "basic_usage": """
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
vk_session = vk_api.VkApi(token='your_token')
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW:
        if event.to_me:
            vk.messages.send(
                user_id=event.user_id,
                message='–ü—Ä–∏–≤–µ—Ç!',
                random_id=get_random_id()
            )
                    """,
                    "async_usage": """
import asyncio
import aiohttp

async def send_message_async(peer_id, message):
    async with aiohttp.ClientSession() as session:
        url = "https://api.vk.com/method/messages.send"
        params = {
            'peer_id': peer_id,
            'message': message,
            'access_token': token,
            'v': '5.199'
        }
        async with session.post(url, params=params) as response:
            return await response.json()
                    """
                },
                "aiohttp": {
                    "version": "3.12.15",
                    "description": "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è HTTP –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
                    "installation": "pip install aiohttp==3.12.15"
                },
                "python-dotenv": {
                    "version": "1.1.1",
                    "description": "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–æ–≤",
                    "installation": "pip install python-dotenv==1.1.1"
                }
            }
        }
        
        return python_docs
    
    def refresh_all_docs(self) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        if not self.check_context7_availability():
            logger.warning("Context7 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        docs = {
            "last_refresh": datetime.now().isoformat(),
            "vk_api": self.refresh_vk_api_docs(),
            "python_libs": self.refresh_python_libs_docs(),
            "context7_status": self.check_context7_availability()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.save_cache(docs)
        
        logger.info("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return docs
    
    def get_docs_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        cache = self.load_cache()
        
        if not cache:
            return "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'refresh docs' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        
        summary = f"""
üìö –°–í–û–î–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
{'='*50}
üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {cache.get('last_refresh', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üîß Context7 —Å—Ç–∞—Ç—É—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if cache.get('context7_status') else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

üìñ VK API:
  ‚Ä¢ –í–µ—Ä—Å–∏—è: {cache.get('vk_api', {}).get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
  ‚Ä¢ –ú–µ—Ç–æ–¥—ã: {len(cache.get('vk_api', {}).get('methods', {}))}
  ‚Ä¢ Rate limit: {cache.get('vk_api', {}).get('rate_limits', {}).get('requests_per_second', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} req/sec

üêç Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
  ‚Ä¢ vk-api: {cache.get('python_libs', {}).get('libraries', {}).get('vk-api', {}).get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
  ‚Ä¢ aiohttp: {cache.get('python_libs', {}).get('libraries', {}).get('aiohttp', {}).get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
  ‚Ä¢ python-dotenv: {cache.get('python_libs', {}).get('libraries', {}).get('python-dotenv', {}).get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        """
        
        return summary.strip()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python refresh_docs.py [refresh|status|check]")
        sys.exit(1)
    
    command = sys.argv[1].lower()
    manager = Context7Manager()
    
    if command == "refresh":
        docs = manager.refresh_all_docs()
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        print(f"üìÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {docs['last_refresh']}")
        
    elif command == "status":
        print(manager.get_docs_summary())
        
    elif command == "check":
        if manager.check_context7_availability():
            print("‚úÖ Context7 –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå Context7 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    else:
        print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: refresh, status, check")

if __name__ == "__main__":
    main()

