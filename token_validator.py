"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ VK —Ç–æ–∫–µ–Ω–æ–≤
"""
import os
import sys
import logging
from dotenv import load_dotenv
import vk_api

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def validate_vk_token(token: str, group_id: int = None) -> dict:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è VK —Ç–æ–∫–µ–Ω–∞
    
    Args:
        token: VK —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        group_id: ID –≥—Ä—É–ø–ø—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    result = {
        'valid': False,
        'user_info': None,
        'group_info': None,
        'permissions': [],
        'errors': []
    }
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
        vk_session = vk_api.VkApi(token=token)
        vk = vk_session.get_api()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            user_info = vk.users.get()
            result['user_info'] = user_info[0]
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info[0]['first_name']} {user_info[0]['last_name']}")
        except Exception as e:
            result['errors'].append(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        if group_id:
            try:
                group_info = vk.groups.getById(group_id=group_id)
                result['group_info'] = group_info[0]
                logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞: {group_info[0]['name']}")
            except Exception as e:
                result['errors'].append(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–∞–≤–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            vk.messages.getConversations(count=1)
            result['permissions'].append('messages')
            logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        except Exception as e:
            result['errors'].append(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü—Ä–∞–≤–∞ –Ω–∞ –≥—Ä—É–ø–ø—ã
        try:
            vk.groups.get()
            result['permissions'].append('groups')
            logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –≥—Ä—É–ø–ø–∞–º–∏")
        except Exception as e:
            result['errors'].append(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –≥—Ä—É–ø–ø–∞–º–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: Long Poll
        try:
            longpoll = vk_api.longpoll.VkLongPoll(vk_session)
            result['permissions'].append('longpoll')
            logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ Long Poll")
        except Exception as e:
            result['errors'].append(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ Long Poll: {e}")
        
        result['valid'] = len(result['errors']) == 0
        
    except Exception as e:
        result['errors'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    return result

def check_current_tokens():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –¢–û–ö–ï–ù–´.env"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –¢–û–ö–ï–ù–´.env...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv('–¢–û–ö–ï–ù–´.env')
    
    vk_token = os.getenv('VK_TOKEN')
    group_id = int(os.getenv('VK_GROUP_ID', 0))
    groq_key = os.getenv('GROQ_API_KEY')
    
    if not vk_token:
        logger.error("‚ùå VK_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ –¢–û–ö–ï–ù–´.env")
        return False
    
    if not group_id:
        logger.error("‚ùå VK_GROUP_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ –¢–û–ö–ï–ù–´.env")
        return False
    
    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:")
    logger.info(f"   VK_TOKEN: {vk_token[:20]}...")
    logger.info(f"   VK_GROUP_ID: {group_id}")
    logger.info(f"   GROQ_API_KEY: {'‚úÖ –ù–∞–π–¥–µ–Ω' if groq_key else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è VK —Ç–æ–∫–µ–Ω–∞
    result = validate_vk_token(vk_token, group_id)
    
    if result['valid']:
        logger.info("üéâ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏:")
        for error in result['errors']:
            logger.error(f"   - {error}")
        return False

def generate_token_instructions():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    instructions = """
üîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ü–û–õ–£–ß–ï–ù–ò–Æ VK –¢–û–ö–ï–ù–ê:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://vk.com/apps?act=manage
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
   - –ù–∞–∑–≤–∞–Ω–∏–µ: "VK Bot Fusionbot"
   - –¢–∏–ø: "Standalone-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
   - –í–∫–ª—é—á–∏—Ç–µ "Open API"
   - –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞: messages, groups, offline
4. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω:
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://oauth.vk.com/authorize?client_id=YOUR_APP_ID&display=page&redirect_uri=https://oauth.vk.com/blank.html&scope=messages,groups,offline&response_type=token&v=5.199
   - –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_APP_ID –Ω–∞ ID –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   - –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ URL
5. –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª –¢–û–ö–ï–ù–´.env:
   VK_TOKEN=–≤–∞—à_–Ω–æ–≤—ã–π_—Ç–æ–∫–µ–Ω
   VK_GROUP_ID=–≤–∞—à_group_id

üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VK Admin –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
- –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ VK
"""
    print(instructions)

if __name__ == "__main__":
    print("üîç VK Token Validator")
    print("=" * 50)
    
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        generate_token_instructions()
        sys.exit(0)
    
    success = check_current_tokens()
    
    if not success:
        print("\n" + "=" * 50)
        generate_token_instructions()
        sys.exit(1)
    
    print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

