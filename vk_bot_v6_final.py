#!/usr/bin/env python3
"""
VK –ë–æ—Ç - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±–µ—Å–µ–¥–∞—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Bots Long Poll –≤–º–µ—Å—Ç–æ User Long Poll
"""
import os
import asyncio
import logging
import json
import time
import sqlite3
import random
import requests
from datetime import datetime
from typing import Dict, List, Optional

from dotenv import load_dotenv

from database import db
from ai_system import ai_system
from console_admin import console_admin

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('–¢–û–ö–ï–ù–´.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VKBotCorrect:
    """VK –ë–æ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –¥–ª—è –±–µ—Å–µ–¥"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.vk_token = os.getenv('VK_TOKEN')
        self.group_id = int(os.getenv('VK_GROUP_ID', 0))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
        if not self.vk_token or not self.group_id:
            logger.error("‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
        
        self.api_url = "https://api.vk.com/method/"
        self.api_version = "5.199"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Long Poll –¥–ª—è –≥—Ä—É–ø–ø
        self.longpoll_server = None
        self.longpoll_key = None
        self.longpoll_ts = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = datetime.now()
        self.messages_processed = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Long Poll –¥–ª—è –≥—Ä—É–ø–ø
        self._init_group_longpoll()
        
        logger.info(f"ü§ñ VK –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. ID –≥—Ä—É–ø–ø—ã: {self.group_id}")
        logger.info(f"üéØ –†–∞–±–æ—Ç–∞–µ–º –≤ –±–µ—Å–µ–¥–∞—Ö —á–µ—Ä–µ–∑ Bots Long Poll")
        logger.info(f"üß† –ò–ò —Å–∏—Å—Ç–µ–º–∞: Groq API + –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite")
    
    def _init_group_longpoll(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Group Long Poll"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä Long Poll –¥–ª—è –≥—Ä—É–ø–ø—ã
            response = self._api_request('groups.getLongPollServer', {
                'group_id': self.group_id
            })
            
            if response and 'response' in response:
                data = response['response']
                self.longpoll_server = data['server']
                self.longpoll_key = data['key']
                self.longpoll_ts = data['ts']
                
                logger.info("‚úÖ Group Long Poll –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                logger.info(f"üîÑ –°–µ—Ä–≤–µ—Ä: {self.longpoll_server}")
                logger.info(f"üîë –ö–ª—é—á: {self.longpoll_key[:20]}...")
                logger.info(f"‚è∞ TS: {self.longpoll_ts}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Long Poll —Å–µ—Ä–≤–µ—Ä")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Long Poll: {e}")
    
    def _api_request(self, method: str, params: Dict) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            params.update({
                'access_token': self.vk_token,
                'v': self.api_version
            })
            
            response = requests.get(f"{self.api_url}{method}", params=params)
            return response.json()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ {method}: {e}")
            return None
    
    def send_message(self, peer_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            params = {
                'peer_id': peer_id,
                'message': message,
                'random_id': random.randint(1, 2147483647)
            }
            
            response = self._api_request('messages.send', params)
            
            if response and 'response' in response:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {peer_id}")
            else:
                error = response.get('error', {}) if response else {}
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _get_longpoll_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Group Long Poll"""
        if not all([self.longpoll_server, self.longpoll_key, self.longpoll_ts]):
            logger.error("‚ùå Long Poll –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            params = {
                'act': 'a_check',
                'key': self.longpoll_key,
                'ts': self.longpoll_ts,
                'wait': 25
            }
            
            response = requests.get(self.longpoll_server, params=params, timeout=30)
            data = response.json()
            
            if 'ts' in data:
                self.longpoll_ts = data['ts']
            
            return data.get('updates', [])
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return None
    
    def _process_message(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            event_type = update.get('type')
            
            if event_type == 'message_new':
                message_data = update.get('object', {}).get('message', {})
                
                user_id = message_data.get('from_id')
                peer_id = message_data.get('peer_id')
                text = message_data.get('text', '').strip()
                date = message_data.get('date', 0)
                
                logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
                logger.info(f"   –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
                logger.info(f"   –í —á–∞—Ç: {peer_id}")
                logger.info(f"   –¢–µ–∫—Å—Ç: '{text}'")
                logger.info(f"   –í—Ä–µ–º—è: {datetime.fromtimestamp(date)}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
                if peer_id > 2000000000:
                    chat_type = "üó£Ô∏è –ë–ï–°–ï–î–ê"
                    chat_id = peer_id - 2000000000
                    logger.info(f"   ‚úÖ –¢–ò–ü: {chat_type} (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID: {chat_id})")
                else:
                    chat_type = "üë§ –õ–ò–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï"
                    logger.info(f"   ‚úÖ –¢–ò–ü: {chat_type}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                message_lower = text.lower()
                self.messages_processed += 1
                
                if message_lower in ['—Ç–µ—Å—Ç', 'test']:
                    response = f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–µ–¥–∞—Ö!\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n–¢–∏–ø: {chat_type}\nID: {peer_id}"
                    self.send_message(peer_id, response)
                    
                elif message_lower in ['–ø–æ–º–æ—â—å', 'help']:
                    help_text = """ü§ñ VK –ë–æ—Ç Fusionbot v6.0

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ —Ç–µ—Å—Ç - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –∏–∏ [–≤–æ–ø—Ä–æ—Å] - –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò
‚Ä¢ —à—É—Ç–∫–∞ - –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É
‚Ä¢ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤: –æ—Ç –ù–æ–≤–∏—á–∫–∞ –¥–æ –ö–æ—Å–º–æ—Å–∞!
üí¨ –†–∞–±–æ—Ç–∞–µ–º –≤ –±–µ—Å–µ–¥–∞—Ö —á–µ—Ä–µ–∑ Bots Long Poll"""
                    self.send_message(peer_id, help_text)
                    
                elif message_lower.startswith('–∏–∏ ') and len(text) > 3:
                    question = text[3:].strip()
                    logger.info(f"üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ò–ò –∑–∞–ø—Ä–æ—Å: {question}")
                    ai_response = asyncio.run(ai_system.get_ai_response(question))
                    self.send_message(peer_id, f"üß† {ai_response}")
                    
                elif message_lower in ['—à—É—Ç–∫–∞', 'joke']:
                    joke = asyncio.run(ai_system.generate_joke())
                    self.send_message(peer_id, f"üòÇ {joke}")
                    
                elif message_lower in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats']:
                    uptime = datetime.now() - self.start_time
                    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}
üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_processed}
üéØ –¢–∏–ø —á–∞—Ç–∞: {chat_type}
üí¨ ID —á–∞—Ç–∞: {peer_id}
üîß –†–µ–∂–∏–º: Bots Long Poll"""
                    self.send_message(peer_id, stats_text)
                    
                elif any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
                    self.send_message(peer_id, f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø VK –ë–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–Ω–≥–æ–≤. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–≤—Å–µ–≥–æ: {self.messages_processed})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ VK –ë–æ—Ç–∞ —Å Bots Long Poll...")
        
        if not all([self.longpoll_server, self.longpoll_key, self.longpoll_ts]):
            logger.error("‚ùå Long Poll –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Group Long Poll —É—Å–ø–µ—à–Ω–æ")
        logger.info("üëÇ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–µ—Å–µ–¥...")
        logger.info("üí° –ù–∞–ø–∏—à–∏—Ç–µ '—Ç–µ—Å—Ç' –≤ –±–µ—Å–µ–¥—É –≥–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç")
        
        try:
            while True:
                updates = self._get_longpoll_updates()
                
                if updates:
                    for update in updates:
                        self._process_message(update)
                elif updates is None:
                    # –û—à–∏–±–∫–∞ - –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Long Poll
                    logger.warning("‚ö†Ô∏è  –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Long Poll...")
                    self._init_group_longpoll()
                    time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        bot = VKBotCorrect()
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        input("\nüëÜ –ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
