import os
import asyncio
import logging
import json
import re
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional

import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id

from database import db
from ai_system import ai_system
from console_admin import console_admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VKBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π VK –±–æ—Ç —Å –ò–ò –∏ —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–Ω–≥–æ–≤"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.vk_token = os.getenv('VK_TOKEN')
        self.group_id = int(os.getenv('VK_GROUP_ID', 0))
        
        # –†–µ–∂–∏–º –¥–µ–º–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        self.demo_mode = not self.vk_token or not self.group_id
        
        if self.demo_mode:
            logger.warning("‚ö†Ô∏è  –î–ï–ú–û –†–ï–ñ–ò–ú: VK_TOKEN –∏–ª–∏ VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            logger.info("üé≠ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            return
        
        if not self.demo_mode:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
            self.vk_session = vk_api.VkApi(token=self.vk_token)
            self.vk = self.vk_session.get_api()
            self.longpoll = VkLongPoll(self.vk_session)
        
        # –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å
        self.user_last_message = {}
        self.flood_limit = 3  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        self.start_time = datetime.now()
        self.messages_processed = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
        console_admin.bot = self
        
        logger.info(f"ü§ñ VK –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. ID –≥—Ä—É–ø–ø—ã: {self.group_id}")
        logger.info(f"üéØ –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö (peer_id > 2000000000)")
        logger.info(f"üß† –ò–ò —Å–∏—Å—Ç–µ–º–∞: Groq ‚Üí Hugging Face ‚Üí –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite —Å –∞–≤—Ç–æ–±–µ–∫–∞–ø–æ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
    
    def send_message(self, peer_id: int, message: str, keyboard: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –í–ö"""
        try:
            params = {
                'peer_id': peer_id,
                'message': message,
                'random_id': get_random_id()
            }
            
            if keyboard:
                params['keyboard'] = keyboard
            
            self.vk.messages.send(**params)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {peer_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def is_chat_conversation(self, peer_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –±–µ—Å–µ–¥–∞, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ª–∏—á–∫–∞"""
        return peer_id > 2000000000
    
    def extract_user_id(self, text: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è [id123|@username]"""
        patterns = [
            r'\[id(\d+)\|',  # [id123|@username]
            r'@id(\d+)',     # @id123
            r'id(\d+)'       # id123
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                return int(match.group(1))
        return None
    
    def check_flood_control(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è"""
        current_time = time.time()
        
        if user_id in self.user_last_message:
            time_diff = current_time - self.user_last_message[user_id]
            if time_diff < self.flood_limit:
                return False
        
        self.user_last_message[user_id] = current_time
        return True

    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ VK –ë–æ—Ç–∞...")
        
        if self.demo_mode:
            logger.info("üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
            logger.info("üìù –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VK_TOKEN –∏ VK_GROUP_ID")
            logger.info("‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –î–µ–º–æ —Ü–∏–∫–ª
            try:
                import time
                while True:
                    time.sleep(5)
                    logger.info("üí§ –î–µ–º–æ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç... (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã)")
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            finally:
                logger.info("üõë –î–µ–º–æ —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                input("\nüëÜ –ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.vk.users.get()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK API —É—Å–ø–µ—à–Ω–æ")
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            for event in self.longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW:
                    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –±–µ—Å–µ–¥–∞–º–∏
                    if not self.is_chat_conversation(event.peer_id):
                        continue
                        
                    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    message = event.text.strip()
                    message_lower = message.lower()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–µ–∑ —Å–ª–µ—à–µ–π
                    if message_lower in ['–ø–æ–º–æ—â—å', 'help']:
                        self.send_message(event.peer_id, "ü§ñ VK –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n–ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n—Ç–µ—Å—Ç - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–∏–∏ [–≤–æ–ø—Ä–æ—Å] - –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò")
                    elif message_lower in ['—Ç–µ—Å—Ç', 'test']:
                        self.send_message(event.peer_id, f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
                    elif message_lower.startswith('–∏–∏ ') and len(message) > 3:
                        # –ò–ò –æ—Ç–≤–µ—Ç
                        question = message[3:].strip()
                        ai_response = asyncio.run(ai_system.get_ai_response(question))
                        self.send_message(event.peer_id, f"üß† {ai_response}")
                    elif any(word in message.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
                        # –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.send_message(event.peer_id, f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø VK –ë–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–Ω–≥–æ–≤. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            input("\nüëÜ –ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = VKBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        input("\nüëÜ –ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")