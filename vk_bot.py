import os
import asyncio
import logging
import json
import re
import time
import sqlite3
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional

import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
from dotenv import load_dotenv

from database import db
from ai_system import ai_system
from console_admin import console_admin

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
load_dotenv('–¢–û–ö–ï–ù–´.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VKBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π VK –±–æ—Ç —Å –ò–ò –∏ —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–Ω–≥–æ–≤"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.vk_token = os.getenv('VK_TOKEN')
        self.group_id = int(os.getenv('VK_GROUP_ID', 0))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
        self.demo_mode = self._check_tokens_validity()
        
        if self.demo_mode:
            logger.warning("‚ö†Ô∏è  –î–ï–ú–û –†–ï–ñ–ò–ú: VK_TOKEN –∏–ª–∏ VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            logger.info("üé≠ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            return
        
        if not self.demo_mode:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
                self.vk_session = vk_api.VkApi(token=self.vk_token)
                self.vk = self.vk_session.get_api()
                self.longpoll = VkLongPoll(self.vk_session)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤
                self._validate_vk_token()
                logger.info("‚úÖ VK —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –∏ API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK API: {e}")
                logger.warning("‚ö†Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏–∑-–∑–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
                logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ –¢–û–ö–ï–ù–´.env")
                self.demo_mode = True
        
        # –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å
        self.user_last_message = {}
        self.flood_limit = 3  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        self.start_time = datetime.now()
        self.messages_processed = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
        console_admin.bot = self
        
        logger.info(f"ü§ñ VK –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. ID –≥—Ä—É–ø–ø—ã: {self.group_id}")
        logger.info(f"üéØ –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö (peer_id > 2000000000)")
        logger.info(f"üß† –ò–ò —Å–∏—Å—Ç–µ–º–∞: Groq ‚Üí Hugging Face ‚Üí –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite —Å –∞–≤—Ç–æ–±–µ–∫–∞–ø–æ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
    
    def _check_tokens_validity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        if not self.vk_token or not self.group_id:
            logger.warning("‚ö†Ô∏è  –¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        if not self.vk_token.startswith('vk1.a.'):
            logger.warning("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VK —Ç–æ–∫–µ–Ω–∞")
            return True
        
        # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å VK API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            test_session = vk_api.VkApi(token=self.vk_token)
            test_vk = test_session.get_api()
            # –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –≥—Ä—É–ø–ø users.get –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ groups.getById
            test_vk.groups.getById(group_id=self.group_id)
            logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã")
            return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {e}")
            return True
    
    def _validate_vk_token(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è VK —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤"""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ users.get
            user_info = self.vk.users.get()
            if user_info and len(user_info) > 0:
                logger.info(f"üë§ –¢–æ–∫–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_info[0]['first_name']} {user_info[0]['last_name']}")
            else:
                logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            
            # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ groups.getById
            try:
                group_info = self.vk.groups.getById(group_id=self.group_id)
                if group_info and len(group_info) > 0:
                    logger.info(f"üè¢ –ì—Ä—É–ø–ø–∞: {group_info[0]['name']}")
                else:
                    logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                self.vk.messages.getConversations(count=1)
                logger.info("üí¨ –ü—Ä–∞–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            raise
    
    def send_message(self, peer_id: int, message: str, keyboard: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –í–ö"""
        if self.demo_mode:
            logger.info(f"üé≠ –î–ï–ú–û: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {peer_id}: {message}")
            return
            
        try:
            params = {
                'peer_id': peer_id,
                'message': message,
                'random_id': get_random_id()
            }
            
            if keyboard:
                params['keyboard'] = keyboard
            
            self.vk.messages.send(**params)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {peer_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def is_chat_conversation(self, peer_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –±–µ—Å–µ–¥–∞, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ª–∏—á–∫–∞"""
        return peer_id > 2000000000
    
    def extract_user_id(self, text: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è [id123|@username]"""
        patterns = [
            r'\[id(\d+)\|',  # [id123|@username]
            r'@id(\d+)',     # @id123
            r'id(\d+)'       # id123
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                return int(match.group(1))
        return None
    
    def check_flood_control(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è"""
        current_time = time.time()
        
        if user_id in self.user_last_message:
            time_diff = current_time - self.user_last_message[user_id]
            if time_diff < self.flood_limit:
                return False
        
        self.user_last_message[user_id] = current_time
        return True
    
    def _register_user_and_add_experience(self, user_id: int, peer_id: int):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ VK
            if not self.demo_mode:
                user_info = self.vk.users.get(user_ids=user_id)[0]
            else:
                # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                user_info = {
                    'first_name': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{user_id}',
                    'last_name': '–î–µ–º–æ'
                }
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = db.create_or_update_user(user_id, user_info)
            
            if user_data:
                # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                experience_gain = random.randint(1, 3)
                self._add_experience(user_id, experience_gain)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def _add_experience(self, user_id: int, amount: int):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            with sqlite3.connect(db.db_path) as conn:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç
                cursor = conn.cursor()
                cursor.execute("SELECT experience, rank_level FROM users WHERE user_id = ?", (user_id,))
                result = cursor.fetchone()
                
                if result:
                    current_exp, current_rank = result
                    new_exp = current_exp + amount
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
                    new_rank = self._calculate_rank(new_exp)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    cursor.execute(
                        "UPDATE users SET experience = ?, rank_level = ?, messages_count = messages_count + 1 WHERE user_id = ?",
                        (new_exp, new_rank, user_id)
                    )
                    
                    # –ï—Å–ª–∏ —Ä–∞–Ω–≥ –ø–æ–≤—ã—Å–∏–ª—Å—è
                    if new_rank > current_rank:
                        rank_info = db.get_rank_info(new_rank)
                        logger.info(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—Å–∏–ª —Ä–∞–Ω–≥ –¥–æ {rank_info['name']}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
    
    def _calculate_rank(self, experience: int) -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞"""
        if experience < 10:
            return 1
        elif experience < 25:
            return 2
        elif experience < 50:
            return 3
        elif experience < 100:
            return 4
        elif experience < 200:
            return 5
        elif experience < 350:
            return 6
        elif experience < 500:
            return 7
        elif experience < 750:
            return 8
        elif experience < 1000:
            return 9
        else:
            return 10

    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ VK –ë–æ—Ç–∞...")
        
        if self.demo_mode:
            logger.info("üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
            logger.info("üìù –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VK_TOKEN –∏ VK_GROUP_ID")
            logger.info("üéÆ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            logger.info("‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –î–µ–º–æ —Ü–∏–∫–ª —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                demo_messages = [
                    ("2000000001", "–ø—Ä–∏–≤–µ—Ç"),
                    ("2000000001", "–ø–æ–º–æ—â—å"),
                    ("2000000001", "—Ç–µ—Å—Ç"),
                    ("2000000001", "–∏–∏ –∫–∞–∫ –¥–µ–ª–∞?"),
                    ("2000000002", "hello"),
                    ("2000000001", "—Å–ø–∞—Å–∏–±–æ")
                ]
                
                for i, (peer_id, message) in enumerate(demo_messages):
                    time.sleep(3)
                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {peer_id}: {message}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_lower = message.lower()
                    
                    if message_lower in ['–ø–æ–º–æ—â—å', 'help']:
                        help_text = """ü§ñ VK –ë–æ—Ç Fusionbot v6.0

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ —Ç–µ—Å—Ç - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –∏–∏ [–≤–æ–ø—Ä–æ—Å] - –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò
‚Ä¢ —à—É—Ç–∫–∞ - –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É
‚Ä¢ –∏—Å—Ç–æ—Ä–∏—è - –∫–æ—Ä–æ—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
‚Ä¢ —Ç–æ–ø - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
‚Ä¢ —Ä–∞–Ω–≥ - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥
‚Ä¢ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤: –æ—Ç –ù–æ–≤–∏—á–∫–∞ –¥–æ –ö–æ—Å–º–æ—Å–∞!
üí¨ –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö"""
                        self.send_message(int(peer_id), help_text)
                    elif message_lower in ['—Ç–µ—Å—Ç', 'test']:
                        self.send_message(int(peer_id), f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
                    elif message_lower.startswith('–∏–∏ ') and len(message) > 3:
                        question = message[3:].strip()
                        ai_response = asyncio.run(ai_system.get_ai_response(question))
                        self.send_message(int(peer_id), f"üß† {ai_response}")
                    elif message_lower in ['—à—É—Ç–∫–∞', 'joke']:
                        joke = asyncio.run(ai_system.generate_joke())
                        self.send_message(int(peer_id), f"üòÇ {joke}")
                    elif message_lower in ['–∏—Å—Ç–æ—Ä–∏—è', 'story']:
                        story = asyncio.run(ai_system.generate_story())
                        self.send_message(int(peer_id), f"üìö {story}")
                    elif message_lower in ['–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç', 'compliment']:
                        compliment = ai_system._generate_local_compliment()
                        self.send_message(int(peer_id), f"üíé {compliment}")
                    elif message_lower in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats']:
                        uptime = datetime.now() - self.start_time
                        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}
üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_processed}
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite
üß† –ò–ò: Groq API + –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
üéØ –†–µ–∂–∏–º: –î–µ–º–æ"""
                        self.send_message(int(peer_id), stats_text)
                    elif any(word in message.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
                        self.send_message(int(peer_id), f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø VK –ë–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–Ω–≥–æ–≤. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–º–æ
                while True:
                    time.sleep(10)
                    logger.info("üí§ –î–µ–º–æ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç... (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã)")
                    
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            finally:
                logger.info("üõë –î–µ–º–æ —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                input("\nüëÜ –ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.vk.users.get()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK API —É—Å–ø–µ—à–Ω–æ")
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            for event in self.longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW:
                    # –†–∞–±–æ—Ç–∞–µ–º —Å –±–µ—Å–µ–¥–∞–º–∏ (peer_id > 2000000000) –∏ –ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    # –ù–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º –±–µ—Å–µ–¥–∞–º
                    if event.peer_id <= 2000000000:
                        logger.info(f"üì± –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.user_id}: {event.text}")
                        # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
                        # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        continue
                        
                    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    message = event.text.strip()
                    message_lower = message.lower()
                    
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
                    self._register_user_and_add_experience(event.user_id, event.peer_id)
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    self.messages_processed += 1
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–µ–∑ —Å–ª–µ—à–µ–π
                    if message_lower in ['–ø–æ–º–æ—â—å', 'help']:
                        help_text = """ü§ñ VK –ë–æ—Ç Fusionbot v6.0

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ —Ç–µ—Å—Ç - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –∏–∏ [–≤–æ–ø—Ä–æ—Å] - –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò
‚Ä¢ —à—É—Ç–∫–∞ - –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É
‚Ä¢ –∏—Å—Ç–æ—Ä–∏—è - –∫–æ—Ä–æ—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
‚Ä¢ —Ç–æ–ø - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
‚Ä¢ —Ä–∞–Ω–≥ - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥
‚Ä¢ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤: –æ—Ç –ù–æ–≤–∏—á–∫–∞ –¥–æ –ö–æ—Å–º–æ—Å–∞!
üí¨ –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö"""
                        self.send_message(event.peer_id, help_text)
                        
                    elif message_lower in ['—Ç–µ—Å—Ç', 'test']:
                        self.send_message(event.peer_id, f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
                        
                    elif message_lower.startswith('–∏–∏ ') and len(message) > 3:
                        # –ò–ò –æ—Ç–≤–µ—Ç
                        question = message[3:].strip()
                        ai_response = asyncio.run(ai_system.get_ai_response(question))
                        self.send_message(event.peer_id, f"üß† {ai_response}")
                        
                    elif message_lower in ['—à—É—Ç–∫–∞', 'joke']:
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É—Ç–∫–∏
                        joke = asyncio.run(ai_system.generate_joke())
                        self.send_message(event.peer_id, f"üòÇ {joke}")
                        
                    elif message_lower in ['–∏—Å—Ç–æ—Ä–∏—è', 'story']:
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
                        story = asyncio.run(ai_system.generate_story())
                        self.send_message(event.peer_id, f"üìö {story}")
                        
                    elif message_lower in ['–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç', 'compliment']:
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞
                        compliment = ai_system._generate_local_compliment()
                        self.send_message(event.peer_id, f"üíé {compliment}")
                        
                    elif message_lower in ['—Ç–æ–ø', 'top']:
                        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        top_users = db.get_top_users(5)
                        if top_users:
                            top_text = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:\n\n"
                            for i, user in enumerate(top_users, 1):
                                rank_info = db.get_rank_info(user['rank_level'])
                                top_text += f"{i}. {rank_info['emoji']} {user['first_name']} {user['last_name']} - {user['experience']} –æ–ø—ã—Ç–∞\n"
                            self.send_message(event.peer_id, top_text)
                        else:
                            self.send_message(event.peer_id, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
                            
                    elif message_lower in ['—Ä–∞–Ω–≥', 'rank']:
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_data = db.get_user(event.user_id)
                        if user_data:
                            rank_info = db.get_rank_info(user_data['rank_level'])
                            rank_text = f"üéñÔ∏è –¢–≤–æ–π —Ä–∞–Ω–≥: {rank_info['name']}\n"
                            rank_text += f"üìä –û–ø—ã—Ç: {user_data['experience']}\n"
                            rank_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_data['messages_count']}"
                            self.send_message(event.peer_id, rank_text)
                        else:
                            self.send_message(event.peer_id, "üë§ –¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞–Ω–≥–æ–≤")
                            
                    elif message_lower in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats']:
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
                        uptime = datetime.now() - self.start_time
                        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}
üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_processed}
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite
üß† –ò–ò: Groq API + –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
üéØ –†–µ–∂–∏–º: {'–î–µ–º–æ' if self.demo_mode else '–ü—Ä–æ–¥–∞–∫—à–Ω'}"""
                        self.send_message(event.peer_id, stats_text)
                        
                    elif any(word in message.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
                        # –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.send_message(event.peer_id, f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø VK –ë–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–Ω–≥–æ–≤. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            input("\nüëÜ –ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = VKBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        input("\nüëÜ –ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")