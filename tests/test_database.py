"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import pytest
import sqlite3
import tempfile
import os
from datetime import datetime

from database import DatabaseManager

class TestDatabaseManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è DatabaseManager"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
        self.db_manager = DatabaseManager(self.temp_db.name)
    
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists(self.temp_db.name):
            os.unlink(self.temp_db.name)
    
    def test_database_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        with sqlite3.connect(self.temp_db.name) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            assert cursor.fetchone() is not None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É chat_admins
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='chat_admins'")
            assert cursor.fetchone() is not None
    
    def test_create_or_update_user(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = 123456789
        user_info = {
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = self.db_manager.create_or_update_user(user_id, user_info)
        
        assert result is not None
        assert result['user_id'] == user_id
        assert result['first_name'] == '–¢–µ—Å—Ç'
        assert result['last_name'] == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        assert result['experience'] == 0
        assert result['rank_level'] == 1
    
    def test_get_user(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = 123456789
        user_info = {
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db_manager.create_or_update_user(user_id, user_info)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.db_manager.get_user(user_id)
        
        assert user is not None
        assert user['user_id'] == user_id
        assert user['first_name'] == '–¢–µ—Å—Ç'
        assert user['last_name'] == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    def test_get_nonexistent_user(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.db_manager.get_user(999999999)
        assert user is None
    
    def test_update_existing_user(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = 123456789
        user_info = {
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db_manager.create_or_update_user(user_id, user_info)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updated_info = {
            'first_name': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        result = self.db_manager.create_or_update_user(user_id, updated_info)
        
        assert result is not None
        assert result['first_name'] == '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π'
        assert result['last_name'] == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    def test_set_admin(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = 123456789
        chat_id = 2000000001
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞
        self.db_manager.set_admin(user_id, chat_id, is_owner=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥–º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        is_admin = self.db_manager.is_admin(user_id, chat_id)
        assert is_admin is True
    
    def test_set_owner(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        user_id = 123456789
        chat_id = 2000000001
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        self.db_manager.set_admin(user_id, chat_id, is_owner=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        is_admin = self.db_manager.is_admin(user_id, chat_id)
        assert is_admin is True
    
    def test_is_admin_nonexistent(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞"""
        is_admin = self.db_manager.is_admin(999999999, 2000000001)
        assert is_admin is False
    
    def test_get_rank_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–Ω–≥–∞—Ö"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–∞–Ω–≥–∏
        for rank_level in range(1, 11):
            rank_info = self.db_manager.get_rank_info(rank_level)
            assert rank_info is not None
            assert 'name' in rank_info
            assert 'emoji' in rank_info
            assert len(rank_info['name']) > 0
            assert len(rank_info['emoji']) > 0
    
    def test_get_rank_info_invalid(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ä–∞–Ω–≥–µ"""
        rank_info = self.db_manager.get_rank_info(999)
        assert rank_info is not None
        assert rank_info['name'] == "ü•â –ù–æ–≤–∏—á–æ–∫"  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–Ω–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def test_get_top_users_empty(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø—É—Å—Ç–æ–π –±–∞–∑—ã"""
        top_users = self.db_manager.get_top_users()
        assert top_users == []
    
    def test_get_top_users_with_data(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º –æ–ø—ã—Ç–æ–º
        users_data = [
            (111, {'first_name': '–ü–µ—Ä–≤—ã–π', 'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}),
            (222, {'first_name': '–í—Ç–æ—Ä–æ–π', 'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}),
            (333, {'first_name': '–¢—Ä–µ—Ç–∏–π', 'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'})
        ]
        
        for user_id, user_info in users_data:
            self.db_manager.create_or_update_user(user_id, user_info)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with sqlite3.connect(self.temp_db.name) as conn:
            conn.execute("UPDATE users SET experience = ? WHERE user_id = ?", (100, 111))
            conn.execute("UPDATE users SET experience = ? WHERE user_id = ?", (200, 222))
            conn.execute("UPDATE users SET experience = ? WHERE user_id = ?", (300, 333))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = self.db_manager.get_top_users(limit=2)
        
        assert len(top_users) == 2
        assert top_users[0]['user_id'] == 333  # –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –æ–ø—ã—Ç
        assert top_users[1]['user_id'] == 222  # –í—Ç–æ—Ä–æ–π –ø–æ –æ–ø—ã—Ç—É
    
    def test_database_connection_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º DatabaseManager —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—É—Ç–µ–º
        invalid_db = DatabaseManager("/invalid/path/database.db")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å None
        user = invalid_db.get_user(123)
        assert user is None
    
    def test_sql_injection_protection(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        user_id = 123456789
        malicious_info = {
            'first_name': "'; DROP TABLE users; --",
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        
        # –ü–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π
        result = self.db_manager.create_or_update_user(user_id, malicious_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        with sqlite3.connect(self.temp_db.name) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            assert cursor.fetchone() is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª—Å—è —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        assert result is not None
        assert result['first_name'] == "'; DROP TABLE users; --"
    
    def test_concurrent_access(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        import threading
        import time
        
        results = []
        
        def create_user(user_id):
            user_info = {
                'first_name': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{user_id}',
                'last_name': '–¢–µ—Å—Ç'
            }
            result = self.db_manager.create_or_update_user(user_id, user_info)
            results.append(result)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
        threads = []
        for i in range(5):
            thread = threading.Thread(target=create_user, args=(100 + i,))
            threads.append(thread)
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        assert len(results) == 5
        for result in results:
            assert result is not None
            assert result['user_id'] in range(100, 105)

class TestDatabaseIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_full_user_lifecycle(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É
        temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        temp_db.close()
        db_manager = DatabaseManager(temp_db.name)
        
        try:
            user_id = 123456789
            user_info = {
                'first_name': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π',
                'last_name': '–¢–µ—Å—Ç'
            }
            
            # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db_manager.create_or_update_user(user_id, user_info)
            assert user is not None
            assert user['experience'] == 0
            assert user['rank_level'] == 1
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            retrieved_user = db_manager.get_user(user_id)
            assert retrieved_user is not None
            assert retrieved_user['first_name'] == '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π'
            
            # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞
            chat_id = 2000000001
            db_manager.set_admin(user_id, chat_id, is_owner=True)
            assert db_manager.is_admin(user_id, chat_id) is True
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–µ
            rank_info = db_manager.get_rank_info(user['rank_level'])
            assert rank_info is not None
            assert rank_info['name'] == "ü•â –ù–æ–≤–∏—á–æ–∫"
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with sqlite3.connect(temp_db.name) as conn:
                conn.execute("UPDATE users SET experience = 150, rank_level = 2 WHERE user_id = ?", (user_id,))
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–Ω–≥
            updated_user = db_manager.get_user(user_id)
            assert updated_user['experience'] == 150
            assert updated_user['rank_level'] == 2
            
            updated_rank_info = db_manager.get_rank_info(updated_user['rank_level'])
            assert updated_rank_info['name'] == "üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π"
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É
            if os.path.exists(temp_db.name):
                os.unlink(temp_db.name)

if __name__ == "__main__":
    pytest.main([__file__, "-v"])

