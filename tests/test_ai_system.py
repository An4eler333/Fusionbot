"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ò–ò
"""
import pytest
import asyncio
from unittest.mock import patch, AsyncMock

from ai_system import AISystem

class TestAISystem:
    """–¢–µ—Å—Ç—ã –¥–ª—è AISystem"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.ai_system = AISystem()
    
    @pytest.mark.asyncio
    async def test_get_ai_response_greeting(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        response = await self.ai_system.get_ai_response("–ø—Ä–∏–≤–µ—Ç")
        
        assert response is not None
        assert len(response) > 0
        assert any(word in response.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi'])
    
    @pytest.mark.asyncio
    async def test_get_ai_response_question(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        response = await self.ai_system.get_ai_response("–∫–∞–∫ –¥–µ–ª–∞?")
        
        assert response is not None
        assert len(response) > 0
        assert '?' in response or any(word in response.lower() for word in ['–≤–æ–ø—Ä–æ—Å', '–¥—É–º–∞—Ç—å'])
    
    @pytest.mark.asyncio
    async def test_get_ai_response_thanks(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"""
        response = await self.ai_system.get_ai_response("—Å–ø–∞—Å–∏–±–æ")
        
        assert response is not None
        assert len(response) > 0
        assert any(word in response.lower() for word in ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Ä–∞–¥', '–ø–æ–º–æ—á—å'])
    
    @pytest.mark.asyncio
    async def test_get_ai_response_default(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        response = await self.ai_system.get_ai_response("—Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        assert response is not None
        assert len(response) > 0
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        default_responses = [
            "–ø–æ–Ω–∏–º–∞—é", "–ª—é–±–æ–ø—ã—Ç–Ω–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", 
            "–∫—Ä—É—Ç–æ", "–∏–¥–µ—è", "—Å—Ç–∏–ª—å–Ω–æ", "—ç–Ω–µ—Ä–≥–∏—á–Ω–æ"
        ]
        assert any(word in response.lower() for word in default_responses)
    
    @pytest.mark.asyncio
    async def test_generate_joke(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—É—Ç–∫–∏"""
        joke = await self.ai_system.generate_joke()
        
        assert joke is not None
        assert len(joke) > 0
        assert "üòÇ" in joke or "ü§ñ" in joke or "üòÑ" in joke
    
    @pytest.mark.asyncio
    async def test_generate_story(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        story = await self.ai_system.generate_story()
        
        assert story is not None
        assert len(story) > 0
        assert "üìö" in story or "üöÄ" in story or "üè∞" in story
    
    @pytest.mark.asyncio
    async def test_generate_story_with_theme(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Ç–µ–º–æ–π"""
        theme = "–∫–æ—Å–º–æ—Å"
        story = await self.ai_system.generate_story(theme)
        
        assert story is not None
        assert len(story) > 0
        assert theme.lower() in story.lower()
    
    @pytest.mark.asyncio
    async def test_get_ai_response_empty_string(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"""
        response = await self.ai_system.get_ai_response("")
        
        assert response is not None
        assert len(response) > 0
    
    @pytest.mark.asyncio
    async def test_get_ai_response_very_long_text(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        long_text = "—ç—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ " * 100
        response = await self.ai_system.get_ai_response(long_text)
        
        assert response is not None
        assert len(response) > 0
    
    @pytest.mark.asyncio
    async def test_get_ai_response_special_characters(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        special_text = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòä @username #hashtag"
        response = await self.ai_system.get_ai_response(special_text)
        
        assert response is not None
        assert len(response) > 0
    
    def test_system_prompt_contains_personality(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—á–Ω–æ—Å—Ç—å"""
        prompt = self.ai_system._get_system_prompt("chat")
        assert "–∑–∞–¥–æ—Ä–Ω—ã–π" in prompt.lower()
    
    def test_clean_ai_response(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Ç–æ–∫–µ–Ω–æ–≤"""
        text = self.ai_system._clean_ai_response("<s> [OUT] –ü—Ä–∏–≤–µ—Ç! [/s]")
        assert "–ü—Ä–∏–≤–µ—Ç" in text
    
    def test_generate_prompt_variants(self):
        assert "—à—É—Ç–∫—É" in self.ai_system._get_system_prompt("joke")
        assert "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç" in self.ai_system._get_system_prompt("compliment")
        assert "–∏—Å—Ç–æ—Ä–∏—é" in self.ai_system._get_system_prompt("story")
    
    def test_openrouter_models_iteration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç OpenRouter –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É"""
        ai = AISystem()
        with patch.object(ai, '_call_openrouter', new_callable=AsyncMock) as mock_or:
            mock_or.return_value = "ok"
            import asyncio
            res = asyncio.get_event_loop().run_until_complete(ai.get_ai_response("hi"))
            assert res == "ok"
    
    def test_helpers_exist(self):
        assert callable(self.ai_system._clean_ai_response)
    
    def test_returns_string(self):
        import asyncio
        res = asyncio.get_event_loop().run_until_complete(self.ai_system.get_ai_response("–ø—Ä–∏–≤–µ—Ç"))
        assert isinstance(res, str)
    
    def test_prompt_contains_time_rules(self):
        prompt = self.ai_system._get_system_prompt("chat")
        assert "–≤—Ä–µ–º—è" in prompt.lower()

class TestAISystemIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è AISystem"""
    
    @pytest.mark.asyncio
    async def test_ai_system_with_mock_openrouter(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ò–ò —Å –º–æ–∫–æ–º OpenRouter API"""
        ai_system = AISystem()
        
        with patch.object(ai_system, '_call_openrouter', new_callable=AsyncMock) as mock_or:
            mock_or.return_value = "Mocked OR response"
            response = await ai_system.get_ai_response("test question")
            mock_or.assert_called_once_with("test question", "chat")
            assert response == "Mocked OR response"

    @pytest.mark.asyncio
    async def test_ai_system_openrouter_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ OpenRouter API"""
        ai_system = AISystem()
        
        with patch.object(ai_system, '_call_openrouter', new_callable=AsyncMock) as mock_or:
            mock_or.side_effect = Exception("OR error")
            response = await ai_system.get_ai_response("–ø—Ä–∏–≤–µ—Ç")
            assert response is not None

if __name__ == "__main__":
    pytest.main([__file__, "-v"])

