"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ò–ò
"""
import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock

from ai_system import AISystem

class TestAISystem:
    """–¢–µ—Å—Ç—ã –¥–ª—è AISystem"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.ai_system = AISystem()
    
    @pytest.mark.asyncio
    async def test_get_ai_response_greeting(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        response = await self.ai_system.get_ai_response("–ø—Ä–∏–≤–µ—Ç")
        
        assert response is not None
        assert len(response) > 0
        assert any(word in response.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi'])
    
    @pytest.mark.asyncio
    async def test_get_ai_response_question(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        response = await self.ai_system.get_ai_response("–∫–∞–∫ –¥–µ–ª–∞?")
        
        assert response is not None
        assert len(response) > 0
        assert '?' in response or any(word in response.lower() for word in ['–≤–æ–ø—Ä–æ—Å', '–¥—É–º–∞—Ç—å'])
    
    @pytest.mark.asyncio
    async def test_get_ai_response_thanks(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"""
        response = await self.ai_system.get_ai_response("—Å–ø–∞—Å–∏–±–æ")
        
        assert response is not None
        assert len(response) > 0
        assert any(word in response.lower() for word in ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Ä–∞–¥', '–ø–æ–º–æ—á—å'])
    
    @pytest.mark.asyncio
    async def test_get_ai_response_default(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        response = await self.ai_system.get_ai_response("—Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        assert response is not None
        assert len(response) > 0
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        default_responses = [
            "–ø–æ–Ω–∏–º–∞—é", "–ª—é–±–æ–ø—ã—Ç–Ω–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", 
            "–∫—Ä—É—Ç–æ", "–∏–¥–µ—è", "—Å—Ç–∏–ª—å–Ω–æ", "—ç–Ω–µ—Ä–≥–∏—á–Ω–æ"
        ]
        assert any(word in response.lower() for word in default_responses)
    
    @pytest.mark.asyncio
    async def test_generate_joke(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—É—Ç–∫–∏"""
        joke = await self.ai_system.generate_joke()
        
        assert joke is not None
        assert len(joke) > 0
        assert "üòÇ" in joke or "ü§ñ" in joke or "üòÑ" in joke
    
    @pytest.mark.asyncio
    async def test_generate_story(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        story = await self.ai_system.generate_story()
        
        assert story is not None
        assert len(story) > 0
        assert "üìö" in story or "üöÄ" in story or "üè∞" in story
    
    @pytest.mark.asyncio
    async def test_generate_story_with_theme(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Ç–µ–º–æ–π"""
        theme = "–∫–æ—Å–º–æ—Å"
        story = await self.ai_system.generate_story(theme)
        
        assert story is not None
        assert len(story) > 0
        assert theme.lower() in story.lower()
    
    @pytest.mark.asyncio
    async def test_get_ai_response_empty_string(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"""
        response = await self.ai_system.get_ai_response("")
        
        assert response is not None
        assert len(response) > 0
    
    @pytest.mark.asyncio
    async def test_get_ai_response_very_long_text(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        long_text = "—ç—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ " * 100
        response = await self.ai_system.get_ai_response(long_text)
        
        assert response is not None
        assert len(response) > 0
    
    @pytest.mark.asyncio
    async def test_get_ai_response_special_characters(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        special_text = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòä @username #hashtag"
        response = await self.ai_system.get_ai_response(special_text)
        
        assert response is not None
        assert len(response) > 0
    
    def test_local_response_greeting_variations(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        greetings = ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ü—Ä–∏–≤–µ—Ç!", "HELLO"]
        
        for greeting in greetings:
            response = self.ai_system._get_local_response(greeting, "chat")
            assert response is not None
            assert len(response) > 0
            assert any(word in response.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi'])
    
    def test_local_response_question_variations(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        questions = ["—á—Ç–æ —ç—Ç–æ?", "–∫–∞–∫ –¥–µ–ª–∞?", "–∫–æ–≥–¥–∞?", "–≥–¥–µ?", "–ø–æ—á–µ–º—É?"]
        
        for question in questions:
            response = self.ai_system._get_local_response(question, "chat")
            assert response is not None
            assert len(response) > 0
            assert '?' in response or any(word in response.lower() for word in ['–≤–æ–ø—Ä–æ—Å', '–¥—É–º–∞—Ç—å'])
    
    def test_local_response_thanks_variations(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
        thanks = ["—Å–ø–∞—Å–∏–±–æ", "thanks", "thx", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "–°–ø–∞—Å–∏–±–æ!"]
        
        for thank in thanks:
            response = self.ai_system._get_local_response(thank, "chat")
            assert response is not None
            assert len(response) > 0
            assert any(word in response.lower() for word in ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Ä–∞–¥', '–ø–æ–º–æ—á—å'])
    
    def test_local_response_contexts(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
        contexts = ["joke", "story", "compliment"]
        
        for context in contexts:
            response = self.ai_system._get_local_response("test", context)
            assert response is not None
            assert len(response) > 0
    
    def test_generate_local_joke_content(self):
        """–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à—É—Ç–æ–∫"""
        joke = self.ai_system._generate_local_joke()
        
        assert joke is not None
        assert len(joke) > 0
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —à—É—Ç–∫–∞
        assert "üòÇ" in joke or "ü§ñ" in joke or "üòÑ" in joke
        assert "\n" in joke  # –®—É—Ç–∫–∏ –æ–±—ã—á–Ω–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ
    
    def test_generate_local_story_content(self):
        """–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π"""
        story = self.ai_system._generate_local_story()
        
        assert story is not None
        assert len(story) > 0
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–æ—Ä–∏—è
        assert "üìö" in story or "üöÄ" in story or "üè∞" in story
        assert len(story) > 50  # –ò—Å—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º–∏
    
    def test_generate_local_compliment_content(self):
        """–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤"""
        compliment = self.ai_system._generate_local_compliment()
        
        assert compliment is not None
        assert len(compliment) > 0
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
        assert any(word in compliment.lower() for word in ['–∑–≤–µ–∑–¥–∞', '—é–º–æ—Ä', '—ç–Ω–µ—Ä–≥–∏—è', '–¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π'])

class TestAISystemIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è AISystem"""
    
    @pytest.mark.asyncio
    async def test_ai_system_with_mock_groq(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ò–ò —Å –º–æ–∫–æ–º Groq API"""
        ai_system = AISystem()
        
        # –ú–æ–∫–∞–µ–º Groq API
        with patch.object(ai_system, '_call_groq', new_callable=AsyncMock) as mock_groq:
            mock_groq.return_value = "Mocked Groq response"
            
            response = await ai_system.get_ai_response("test question")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Groq –±—ã–ª –≤—ã–∑–≤–∞–Ω
            mock_groq.assert_called_once_with("test question", "chat")
            assert response == "Mocked Groq response"
    
    @pytest.mark.asyncio
    async def test_ai_system_groq_fallback(self):
        """–¢–µ—Å—Ç fallback –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Groq"""
        ai_system = AISystem()
        
        # –ú–æ–∫–∞–µ–º Groq API —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª None (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        with patch.object(ai_system, '_call_groq', new_callable=AsyncMock) as mock_groq:
            mock_groq.return_value = None
            
            response = await ai_system.get_ai_response("–ø—Ä–∏–≤–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è fallback
            mock_groq.assert_called_once()
            assert response is not None
            assert response != "Mocked Groq response"
            # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            assert any(word in response.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi'])
    
    @pytest.mark.asyncio
    async def test_ai_system_groq_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Groq API"""
        ai_system = AISystem()
        
        # –ú–æ–∫–∞–µ–º Groq API —á—Ç–æ–±—ã –æ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with patch.object(ai_system, '_call_groq', new_callable=AsyncMock) as mock_groq:
            mock_groq.side_effect = Exception("Groq API error")
            
            response = await ai_system.get_ai_response("test")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback
            mock_groq.assert_called_once()
            assert response is not None
            # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            assert len(response) > 0

if __name__ == "__main__":
    pytest.main([__file__, "-v"])

