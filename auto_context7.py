#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Context7 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""
import os
import sys
import json
import subprocess
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AutoContext7:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Context7"""
    
    def __init__(self):
        self.config_file = "context7_vk_config.json"
        self.cache_file = "context7_cache.json"
        self.auto_use = True
        
    def should_use_context7(self, query: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Context7"""
        context7_keywords = [
            "vk api", "vk-api", "vk_api",
            "python vk", "python-vk",
            "vk bot", "vk-bot", "vk_bot",
            "messages.send", "longpoll", "vk_api",
            "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "latest documentation",
            "–Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã", "new methods",
            "–≤–µ—Ä—Å–∏—è api", "api version"
        ]
        
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in context7_keywords)
    
    def get_context7_docs(self, query: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Context7"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ Context7
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.info(f"üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è: {query}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Context7
            if "vk api" in query.lower():
                return self._get_vk_api_docs(query)
            elif "python" in query.lower():
                return self._get_python_docs(query)
            else:
                return self._get_general_docs(query)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            return None
    
    def _get_vk_api_docs(self, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ VK API"""
        return """
üìö VK API –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø (—á–µ—Ä–µ–∑ Context7)
=====================================

üîó –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: 5.199+
üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-09-21

üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:
```python
import vk_api
from vk_api.utils import get_random_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
vk_session = vk_api.VkApi(token='your_token')
vk = vk_session.get_api()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
vk.messages.send(
    peer_id=2000000001,  # ID –±–µ—Å–µ–¥—ã
    message='–ü—Ä–∏–≤–µ—Ç!',
    random_id=get_random_id()
)
```

üîÑ Long Poll –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:
```python
from vk_api.longpoll import VkLongPoll, VkEventType

longpoll = VkLongPoll(vk_session)

for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW:
        if event.to_me:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = event.text
            user_id = event.user_id
            peer_id = event.peer_id
```

‚ö° Rate Limiting:
- –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É
- –ú–∞–∫—Å–∏–º—É–º 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ peer_id > 2000000000 (–±–µ—Å–µ–¥—ã)
- –í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        """
    
    def _get_python_docs(self, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Python –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        return """
üêç PYTHON –ë–ò–ë–õ–ò–û–¢–ï–ö–ò (—á–µ—Ä–µ–∑ Context7)
===================================

üì¶ vk-api==11.10.0 (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
```python
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞
pip install vk-api==11.10.0

# –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

vk_session = vk_api.VkApi(token='your_token')
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)
```

üåê aiohttp==3.12.15 (–¥–ª—è async –∑–∞–ø—Ä–æ—Å–æ–≤)
```python
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞
pip install aiohttp==3.12.15

# Async HTTP –∑–∞–ø—Ä–æ—Å—ã
import aiohttp
import asyncio

async def send_vk_request():
    async with aiohttp.ClientSession() as session:
        url = "https://api.vk.com/method/messages.send"
        params = {
            'peer_id': 2000000001,
            'message': '–ü—Ä–∏–≤–µ—Ç!',
            'access_token': token,
            'v': '5.199'
        }
        async with session.post(url, params=params) as response:
            return await response.json()
```

üîß python-dotenv==1.1.1 (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
```python
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞
pip install python-dotenv==1.1.1

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
from dotenv import load_dotenv
import os

load_dotenv('–¢–û–ö–ï–ù–´.env')
vk_token = os.getenv('VK_TOKEN')
        """
    
    def _get_general_docs(self, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        return """
üìñ –û–ë–©–ê–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø (—á–µ—Ä–µ–∑ Context7)
====================================

üîç –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
- Context7 –¥–ª—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
- GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ API –≤–µ—Ä—Å–∏–∏
- –°–ª–µ–¥—É–π—Ç–µ best practices
        """
    
    def auto_enhance_response(self, user_query: str, ai_response: str) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Context7"""
        if not self.should_use_context7(user_query):
            return ai_response
        
        logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Context7")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        context7_docs = self.get_context7_docs(user_query)
        
        if context7_docs:
            enhanced_response = f"""
{ai_response}

---
ü§ñ **–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø (Context7)**
{context7_docs}

---
üí° *–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Context7 –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏*
            """
            return enhanced_response
        
        return ai_response
    
    def check_api_versions(self) -> Dict[str, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π API"""
        versions = {
            "vk_api": "5.199+",
            "python_vk_api": "11.10.0",
            "aiohttp": "3.12.15",
            "python_dotenv": "1.1.1",
            "pytest": "8.4.2",
            "psutil": "7.1.0"
        }
        
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π —á–µ—Ä–µ–∑ Context7")
        return versions
    
    def get_best_practices(self, topic: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ —á–µ—Ä–µ–∑ Context7"""
        practices = {
            "vk_api": [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Long Poll –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ rate limiting (3 —Å–µ–∫ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)",
                "–†–∞–±–æ—Ç–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å –±–µ—Å–µ–¥–∞–º–∏ (peer_id > 2000000000)",
                "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
                "–õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ—à–∏–±–∫–∏ API"
            ],
            "python": [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ type hints –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ async/await –¥–ª—è I/O –æ–ø–µ—Ä–∞—Ü–∏–π",
                "–°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID",
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logging –≤–º–µ—Å—Ç–æ print",
                "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
            ],
            "security": [
                "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ª–æ–≥–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã",
                "–í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π"
            ]
        }
        
        return practices.get(topic, ["–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"])
    
    def setup_auto_usage(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Context7")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        auto_config = {
            "auto_context7": {
                "enabled": True,
                "keywords": [
                    "vk api", "vk-api", "vk_api",
                    "python vk", "python-vk",
                    "vk bot", "vk-bot", "vk_bot",
                    "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "latest documentation"
                ],
                "auto_enhance": True,
                "check_versions": True,
                "get_practices": True
            },
            "last_setup": datetime.now().isoformat()
        }
        
        with open("auto_context7_config.json", "w", encoding="utf-8") as f:
            json.dump(auto_config, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Context7 –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    auto_context7 = AutoContext7()
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python auto_context7.py [setup|check|enhance <query>]")
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    if command == "setup":
        auto_context7.setup_auto_usage()
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Context7 –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
    elif command == "check":
        versions = auto_context7.check_api_versions()
        print("üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:")
        for lib, version in versions.items():
            print(f"  ‚Ä¢ {lib}: {version}")
            
    elif command == "enhance" and len(sys.argv) > 2:
        query = " ".join(sys.argv[2:])
        enhanced = auto_context7.auto_enhance_response(query, "–ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
        print(enhanced)
        
    else:
        print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

if __name__ == "__main__":
    main()

