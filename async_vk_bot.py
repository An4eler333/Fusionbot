"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è async –≤–µ—Ä—Å–∏—è VK –ë–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""
import os
import asyncio
import logging
import json
import re
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union
from dataclasses import dataclass
from enum import Enum

import aiohttp
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
from dotenv import load_dotenv

from database import db
from ai_system import ai_system
from console_admin import console_admin

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
load_dotenv('–¢–û–ö–ï–ù–´.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BotState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    INITIALIZING = "initializing"
    RUNNING = "running"
    DEMO = "demo"
    ERROR = "error"
    STOPPING = "stopping"

@dataclass
class MessageContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    peer_id: int
    user_id: int
    text: str
    timestamp: datetime
    is_chat: bool
    user_info: Optional[Dict] = None

@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    vk_token: str
    group_id: int
    groq_api_key: str
    flood_limit: int = 3
    max_message_length: int = 4096
    demo_mode: bool = False
    auto_backup_interval: int = 300  # 5 –º–∏–Ω—É—Ç

class AsyncVKBot:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π VK –±–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, config: BotConfig):
        self.config = config
        self.state = BotState.INITIALIZING
        
        # VK API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.vk_session: Optional[vk_api.VkApi] = None
        self.vk: Optional[object] = None
        self.longpoll: Optional[VkLongPoll] = None
        
        # HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
        self.http_session: Optional[aiohttp.ClientSession] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.stats = {
            'start_time': datetime.now(),
            'messages_processed': 0,
            'commands_executed': 0,
            'errors_count': 0,
            'last_activity': datetime.now()
        }
        
        # –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å
        self.user_last_message: Dict[int, float] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
        console_admin.bot = self
        
        logger.info("üöÄ AsyncVKBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
            if not await self._validate_tokens():
                self.state = BotState.DEMO
                logger.warning("‚ö†Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º")
                return True
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VK API
            await self._init_vk_api()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
            await self._init_http_client()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self._init_database()
            
            self.state = BotState.RUNNING
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.state = BotState.ERROR
            return False
    
    async def _validate_tokens(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
        if not self.config.vk_token or not self.config.group_id:
            logger.warning("‚ö†Ô∏è  –¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return False
        
        if not self.config.vk_token.startswith('vk1.a.'):
            logger.warning("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VK —Ç–æ–∫–µ–Ω–∞")
            return False
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            test_session = vk_api.VkApi(token=self.config.vk_token)
            test_vk = test_session.get_api()
            test_vk.users.get()
            logger.info("‚úÖ VK —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  VK —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {e}")
            return False
    
    async def _init_vk_api(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API"""
        self.vk_session = vk_api.VkApi(token=self.config.vk_token)
        self.vk = self.vk_session.get_api()
        self.longpoll = VkLongPoll(self.vk_session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        await self._check_vk_permissions()
        logger.info("‚úÖ VK API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _init_http_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
        timeout = aiohttp.ClientTimeout(total=30)
        self.http_session = aiohttp.ClientSession(timeout=timeout)
        logger.info("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ database.py
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    
    async def _check_vk_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ VK API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = self.vk.users.get()
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info[0]['first_name']} {user_info[0]['last_name']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_info = self.vk.groups.getById(group_id=self.config.group_id)
            logger.info(f"üè¢ –ì—Ä—É–ø–ø–∞: {group_info[0]['name']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.vk.messages.getConversations(count=1)
            logger.info("üí¨ –ü—Ä–∞–≤–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤: {e}")
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if self.state == BotState.DEMO:
            await self._run_demo_mode()
            return
        
        if self.state != BotState.RUNNING:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            background_tasks = [
                asyncio.create_task(self._background_stats_updater()),
                asyncio.create_task(self._background_cleanup()),
            ]
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            await self._message_loop()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self._cleanup()
    
    async def _run_demo_mode(self):
        """–î–µ–º–æ-—Ä–µ–∂–∏–º —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π"""
        logger.info("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞...")
        
        demo_messages = [
            ("2000000001", "–ø—Ä–∏–≤–µ—Ç"),
            ("2000000001", "–ø–æ–º–æ—â—å"),
            ("2000000001", "—Ç–µ—Å—Ç"),
            ("2000000001", "–∏–∏ –∫–∞–∫ –¥–µ–ª–∞?"),
            ("2000000002", "hello"),
            ("2000000001", "—Å–ø–∞—Å–∏–±–æ")
        ]
        
        for peer_id, message in demo_messages:
            await asyncio.sleep(3)
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {peer_id}: {message}")
            
            context = MessageContext(
                peer_id=int(peer_id),
                user_id=1,
                text=message,
                timestamp=datetime.now(),
                is_chat=True
            )
            
            await self._process_message(context)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–º–æ
        while True:
            await asyncio.sleep(10)
            logger.info("üí§ –î–µ–º–æ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    
    async def _message_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        for event in self.longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                await self._handle_new_message(event)
    
    async def _handle_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –±–µ—Å–µ–¥–∞
            if not self._is_chat_conversation(event.peer_id):
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            context = MessageContext(
                peer_id=event.peer_id,
                user_id=event.user_id,
                text=event.text.strip(),
                timestamp=datetime.now(),
                is_chat=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å
            if not await self._check_flood_control(context.user_id):
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._process_message(context)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats['errors_count'] += 1
    
    async def _process_message(self, context: MessageContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.stats['messages_processed'] += 1
        self.stats['last_activity'] = datetime.now()
        
        message_lower = context.text.lower()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if message_lower in ['–ø–æ–º–æ—â—å', 'help']:
            await self._handle_help_command(context)
        elif message_lower in ['—Ç–µ—Å—Ç', 'test']:
            await self._handle_test_command(context)
        elif message_lower.startswith('–∏–∏ ') and len(context.text) > 3:
            await self._handle_ai_command(context)
        elif any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
            await self._handle_greeting(context)
        else:
            await self._handle_unknown_message(context)
    
    async def _handle_help_command(self, context: MessageContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        help_text = """ü§ñ VK –ë–æ—Ç Fusionbot v6.0

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ø–æ–º–æ—â—å / help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ —Ç–µ—Å—Ç / test - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –∏–∏ [–≤–æ–ø—Ä–æ—Å] - –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò
‚Ä¢ –ø—Ä–∏–≤–µ—Ç - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò–ò –æ—Ç–≤–µ—Ç—ã —Å fallback
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
‚Ä¢ –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!"""
        
        await self._send_message(context.peer_id, help_text)
        self.stats['commands_executed'] += 1
    
    async def _handle_test_command(self, context: MessageContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        test_text = f"""‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['messages_processed']}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - self.stats['start_time']}
‚Ä¢ –†–µ–∂–∏–º: {'–î–µ–º–æ' if self.state == BotState.DEMO else '–†–∞–±–æ—á–∏–π'}"""
        
        await self._send_message(context.peer_id, test_text)
        self.stats['commands_executed'] += 1
    
    async def _handle_ai_command(self, context: MessageContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò –∫–æ–º–∞–Ω–¥—ã"""
        question = context.text[3:].strip()
        ai_response = await ai_system.get_ai_response(question)
        await self._send_message(context.peer_id, f"üß† {ai_response}")
        self.stats['commands_executed'] += 1
    
    async def _handle_greeting(self, context: MessageContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        greeting = f"""üëã –ü—Ä–∏–≤–µ—Ç! –Ø VK –ë–æ—Ç Fusionbot v6.0

üéØ –£ –º–µ–Ω—è –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤, –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!

üí° –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π!"""
        
        await self._send_message(context.peer_id, greeting)
    
    async def _handle_unknown_message(self, context: MessageContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–æ–µ —ç—Ö–æ –∏–ª–∏ –ò–ò –æ—Ç–≤–µ—Ç
        if len(context.text) > 10:
            ai_response = await ai_system.get_ai_response(context.text)
            await self._send_message(context.peer_id, f"üí≠ {ai_response}")
    
    async def _send_message(self, peer_id: int, message: str, keyboard: Optional[str] = None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.state == BotState.DEMO:
            logger.info(f"üé≠ –î–ï–ú–û: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {peer_id}: {message[:100]}...")
            return
        
        try:
            params = {
                'peer_id': peer_id,
                'message': message,
                'random_id': get_random_id()
            }
            
            if keyboard:
                params['keyboard'] = keyboard
            
            self.vk.messages.send(**params)
            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {peer_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats['errors_count'] += 1
    
    def _is_chat_conversation(self, peer_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –±–µ—Å–µ–¥–∞"""
        return peer_id > 2000000000
    
    async def _check_flood_control(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è"""
        current_time = time.time()
        
        if user_id in self.user_last_message:
            time_diff = current_time - self.user_last_message[user_id]
            if time_diff < self.config.flood_limit:
                return False
        
        self.user_last_message[user_id] = current_time
        return True
    
    async def _background_stats_updater(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.state == BotState.RUNNING:
            await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            console_admin.update_stats('messages_processed', 0)
    
    async def _background_cleanup(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏"""
        while self.state == BotState.RUNNING:
            await asyncio.sleep(300)  # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è
            current_time = time.time()
            old_users = [
                user_id for user_id, last_time in self.user_last_message.items()
                if current_time - last_time > 3600  # 1 —á–∞—Å
            ]
            for user_id in old_users:
                del self.user_last_message[user_id]
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.http_session:
            await self.http_session.close()
        
        self.state = BotState.STOPPING
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = BotConfig(
        vk_token=os.getenv('VK_TOKEN', ''),
        group_id=int(os.getenv('VK_GROUP_ID', 0)),
        groq_api_key=os.getenv('GROQ_API_KEY', ''),
        demo_mode=not os.getenv('VK_TOKEN') or not os.getenv('VK_GROUP_ID')
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = AsyncVKBot(config)
    
    if await bot.initialize():
        await bot.run()
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        input("\nüëÜ –ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

